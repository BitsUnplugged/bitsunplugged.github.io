{
	"info": {
		"_postman_id": "4fc21ab6-f77f-4bbe-a8e3-dd12b034a5ee",
		"name": "Bits Unplugged",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21301242",
		"_collection_link": "https://crimson-space-266551.postman.co/workspace/Team-Workspace~31805115-9c42-4ed0-8d52-148b737f4346/collection/32117994-4fc21ab6-f77f-4bbe-a8e3-dd12b034a5ee?action=share&source=collection_link&creator=21301242"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mahirlabibdihan@gmail.com\",\r\n    \"pass\": \"root\",\r\n    \"type\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
              "raw": "https://bitsunplugged-dev.onrender.com/api/auth/logout",
              "protocol": "https",
              "host": ["bitsunplugged-dev.onrender.com"],
              "port": "443",
              "path": ["api", "auth", "logout"]
            },
						"description": "## Auth Login\n\nThis endpoint allows users to log in and obtain an access token for accessing protected resources.\n\n### Request Body\n\n- `email` (string): The email address of the user.\n- `pass` (string): The password of the user.\n- `type` (string): The type of authentication.\n    \n\n### Response\n\n- `access_token` (string): The token used to access protected resources.\n- `token_type` (string): The type of token.\n- `expires_in` (integer): The duration of the access token's validity.\n- `refresh_token` (string): The token used to obtain a new access token."
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"mahirlabibdihan@gmail.com\",\r\n    \"pass\": \"root\",\r\n    \"type\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/login",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "390"
								},
								{
									"key": "ETag",
									"value": "W/\"186-noub4ciZfWuwnnC0dmhqAkVQeuw\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:21:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU3MjUxOSwiZXhwIjoxNzA0NjU4OTE5fQ.uZW4WdygTPGqV9LKEK5abbhjTboj9zYCZf9A7mZAXpo\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"new_refresh_token\"\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU3MjUxOSwiZXhwIjoxNzA0NjU4OTE5fQ.uZW4WdygTPGqV9LKEK5abbhjTboj9zYCZf9A7mZAXpo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"your_refresh_token\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/refresh-token",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"refresh-token"
							]
						},
						"description": "This endpoint is used to refresh the access token by providing the refresh token in the request body.\n\n### Request Body\n\n- refresh_token (string, required): The refresh token used to obtain a new access token.\n    \n\n### Response\n\n- access_token (string): The new access token.\n- token_type (string): Type of token, e.g., \"bearer\".\n- expires_in (integer): Time in seconds until the token expires.\n- refresh_token (string): The new refresh token.\n    \n\n#### Example\n\n``` json\n{\n    \"access_token\": \"new_access_token\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"new_refresh_token\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/refresh-token",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "111"
								},
								{
									"key": "ETag",
									"value": "W/\"6f-FS5KyuSpqMpQ6BVGdOQ/Fs9Is7M\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:22:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"new_access_token\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"new_refresh_token\"\n}"
						}
					]
				},
				{
					"name": "Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"souvik7706\",\r\n    \"email\": \"souvik7706@gmail.com\",\r\n    \"pass\": \"MyNameIs@Souvik7701\",\r\n    \"type\": \"0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/signup",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "## Description\n\nThis endpoint is used to sign up a new user. The request should be sent as an HTTP POST to [https://bitsunplugged-dev.onrender.com/api/auth/signup](https://bitsunplugged-dev.onrender.com/api/auth/signup) with a JSON payload in the raw request body.\n\n## Request\n\nThe payload should include the user's username, email, password, and type."
					},
					"response": [
						{
							"name": "Singup",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"souvik7707\",\r\n    \"email\": \"souvik7707@gmail.com\",\r\n    \"pass\": \"MyNameIs@Souvik7701\",\r\n    \"type\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/signup",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Thu, 04 Jan 2024 19:47:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "ApproveSetter",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAkeUdHN1RkMmh1VFlPOFlVbGJSUUtiLmxKNmFOQ1l1aGtNaXZGL3lBeHlndG5GODFNb0hjVEsiLCJ0eXBlIjoiMiIsImlhdCI6MTcwNDU1MDg5MCwiZXhwIjoxNzA0NjM3MjkwfQ.4D5F8EzXu5hakI5DBHATRLUdvXZTS2dl6nLg-5C71w8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/approve_setter/3",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"approve_setter",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Approve_setter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/approve_setter/3",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"approve_setter",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 14:21:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "ForgotPass",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mahirlabibdihan@gmail.com\",\r\n    \"type\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/forgot_pass/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"forgot_pass",
								""
							]
						}
					},
					"response": [
						{
							"name": "ForgotPass",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"mahirlabibdihan@gmail.com\",\r\n    \"type\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/forgot_pass/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"forgot_pass",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 14:19:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "ResetPass",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"1234\",\r\n    \"new_pass\": \"root\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/reset_pass/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"reset_pass",
								""
							]
						}
					},
					"response": [
						{
							"name": "ResetPass",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\": \"1234\",\r\n    \"new_pass\": \"root\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/reset_pass/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"reset_pass",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 14:20:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "ChangePassword",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJzYXllbSIsInBhc3MiOiIkMmEkMTAkUlJkUTdGeWxjTXBGalMya29aMEJvdVU1TDR6S1dvUERPci9CeXAzdWo3V01uVTJzSG54eTIiLCJ0eXBlIjoiMSIsImlhdCI6MTcwNDU0ODc2MywiZXhwIjoxNzA0NjM1MTYzfQ.oUovmR9iVJVZcDNtQIDLGjyHxXYLM71VE8rx18_TTsE",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"old_pass\" : \"root\",\r\n    \"new_pass\" : \"root2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/change_pass/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"change_pass",
								""
							]
						}
					},
					"response": [
						{
							"name": "ChangePassword",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"old_pass\" : \"root\",\r\n    \"new_pass\" : \"root2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/change_pass/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"change_pass",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 14:19:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "DeleteAccount",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJzYXllbSIsInBhc3MiOiIkMmEkMTAkUlJkUTdGeWxjTXBGalMya29aMEJvdVU1TDR6S1dvUERPci9CeXAzdWo3V01uVTJzSG54eTIiLCJ0eXBlIjoiMSIsImlhdCI6MTcwNDU0ODc2MywiZXhwIjoxNzA0NjM1MTYzfQ.oUovmR9iVJVZcDNtQIDLGjyHxXYLM71VE8rx18_TTsE",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/auth/delete_account/3",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"auth",
								"delete_account",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Delete Account",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/auth/delete_account/3",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"auth",
										"delete_account",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:05:10 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Topic",
			"item": [
				{
					"name": "GetTopic",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/6",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								"6"
							]
						},
						"description": "# Get Topic Details\n\nThis endpoint retrieves details for a specific topic.\n\n## Request\n\nThe request does not require any payload in the request body.\n\n## Response\n\nThe response will contain an object, which represents the topic. The topic object includes the following properties:\n\n- \"topic_id\": (number) The unique identifier for the topic.\n    \n- \"name\": (string) The name of the topic.\n    \n- \"description\": (string) The description of the topic. This may be null if no description is available.\n    \n- \"logo\": (string) The URL for the logo associated with the topic."
					},
					"response": [
						{
							"name": "GetTopic",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/6",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										"6"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "138"
								},
								{
									"key": "ETag",
									"value": "W/\"8a-1C/cOMOhlW+/YQFDzKpR3tWvmZU\""
								},
								{
									"key": "Date",
									"value": "Thu, 04 Jan 2024 20:25:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"topic_id\": 6,\n        \"name\": \"Graph\",\n        \"description\": \"Nodes and Edges\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\"\n    }\n]"
						}
					]
				},
				{
					"name": "AddTopic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"demo topic 3\",\r\n    \"description\": \"this is a demo topic 3\",\r\n    \"logo\": \"logo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								""
							]
						},
						"description": "This endpoint allows you to create a new topic by making an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body type with the keys \"name\", \"description\", and \"logo\". The values for these keys should be provided accordingly to create the new topic.\n\n### Request Body\n\n- `name`: (string) The name of the topic.\n- `description`: (string) A description of the topic.\n- `logo`: (string) The URL or file path for the topic's logo."
					},
					"response": [
						{
							"name": "AddTopic",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"demo topic\",\r\n    \"description\": \"this is a demo topic\",\r\n    \"logo\": \"logo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Thu, 04 Jan 2024 20:05:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateTopic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"topic\" : {\r\n    \"name\": \"Updated\",\r\n    \"description\": \"this is a Updated topic\",\r\n    \"logo\": \"logo.com\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/6",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								"6"
							]
						},
						"description": "This endpoint allows you to update the details of a specific topic using an HTTP PUT request to the specified URL. The request should include a payload with the raw request body type containing the updated information for the topic, such as the name, description, and logo.\n\n### Request Body\n\n- `topic[name]` (text, optional): The updated name of the topic.\n- `topic[description]` (text, optional): The updated description of the topic.\n- `topic[logo]` (text, optional): The updated logo for the topic.\n    \n\n### Response\n\nUpon a successful update, the endpoint returns a status code of 200 with an empty array as the response body."
					},
					"response": [
						{
							"name": "UpdateTopic",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topic\" : {\r\n    \"name\": \"Updated\",\r\n    \"description\": \"this is a Updated topic\",\r\n    \"logo\": \"logo.com\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/6",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										"6"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 08:23:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "DeleteTopic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/10",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								"10"
							]
						},
						"description": "This endpoint sends an HTTP DELETE request to delete the topic with the given ID .\n\n### Request\n\nThe request does not require any payload in the raw request body.\n\n### Response\n\n- Status: 200\n- Data: An empty array (\\[\\])"
					},
					"response": [
						{
							"name": "DeleteTopic",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/10",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										"10"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 08:31:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetAllTopics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								""
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of topics. The response includes an array of objects, where each object represents a topic with its ID, name, description, and logo URL. The \"topic_id\" is a unique identifier for each topic, \"name\" represents the name of the topic, \"description\" provides a brief description of the topic, and \"logo\" contains the URL of the topic's logo image.\n\nExample response:\n```json\n[\n    {\n        \"topic_id\": 6,\n        \"name\": \"Graph\",\n        \"description\": \"Nodes and Edges\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\"\n    },\n    {\n        \"topic_id\": 2,\n        \"name\": \"Recursion\",\n        \"description\": null,\n        \"logo\": \"https://res.cloudinary.com/practicaldev/image/fetch/s--BWDV0wtG--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/226xc0p9pgtgadnin92j.jpeg\"\n    },\n    {\n        \"topic_id\": 3,\n        \"name\": \"Sorting\",\n        \"description\": null,\n        \"logo\": \"https://cdn4.vectorstock.com/i/1000x1000/39/13/sorting-elements-vector-4373913.jpg\"\n    },\n    {\n        \"topic_id\": 8,\n        \"name\": \"Tree\",\n        \"description\": null,\n        \"logo\": \"https://www.crio.do/blog/content/images/size/w1000/2022/02/Types-of-Binary-Trees.png\"\n    }\n]\n```\n"
					},
					"response": [
						{
							"name": "GetAllTopics",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "676"
								},
								{
									"key": "ETag",
									"value": "W/\"2a4-Ty9MTqfTwplXyaX5pH7/XQU5wVE\""
								},
								{
									"key": "Date",
									"value": "Thu, 04 Jan 2024 20:01:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"topic_id\": 6,\n        \"name\": \"Graph\",\n        \"description\": \"Nodes and Edges\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\"\n    },\n    {\n        \"topic_id\": 2,\n        \"name\": \"Recursion\",\n        \"description\": null,\n        \"logo\": \"https://res.cloudinary.com/practicaldev/image/fetch/s--BWDV0wtG--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/226xc0p9pgtgadnin92j.jpeg\"\n    },\n    {\n        \"topic_id\": 3,\n        \"name\": \"Sorting\",\n        \"description\": null,\n        \"logo\": \"https://cdn4.vectorstock.com/i/1000x1000/39/13/sorting-elements-vector-4373913.jpg\"\n    },\n    {\n        \"topic_id\": 8,\n        \"name\": \"Tree\",\n        \"description\": null,\n        \"logo\": \"https://www.crio.do/blog/content/images/size/w1000/2022/02/Types-of-Binary-Trees.png\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetLiveTopics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/topic/live",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"topic",
								"live"
							]
						},
						"description": "This HTTP GET request is used to retrieve a list of live topics from the API. The request does not require a request body. The response will include an array of objects, where each object represents a topic with its ID, name, description, and logo URL. The \"name\" field represents the name of the topic, the \"description\" field provides a brief description of the topic, and the \"logo\" field contains the URL of the topic's logo image.\n\nExample Response:\n\n``` json\n[\n    {\n        \"topic_id\": 6,\n        \"name\": \"Graph\",\n        \"description\": \"Nodes and Edges\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\"\n    },\n    {\n        \"topic_id\": 3,\n        \"name\": \"Sorting\",\n        \"description\": null,\n        \"logo\": \"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"\n    },\n    {\n        \"topic_id\": 2,\n        \"name\": \"Recursion\",\n        \"description\": null,\n        \"logo\": \"https://i.pinimg.com/originals/a1/2b/a8/a12ba80f3701ef4e7014001e6c1869ac.gif\"\n    },\n    {\n        \"topic_id\": 8,\n        \"name\": \"Tree\",\n        \"description\": null,\n        \"logo\": \"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcS7-pjys5IOotbaoxbBlxDklbg6YEPMwLcS0GOlOgRtEBWP_bQU\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "GetLiveTopics",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/topic/live",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"topic",
										"live"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "580"
								},
								{
									"key": "ETag",
									"value": "W/\"244-fQML/UbCK7/Np0pQsCghWCSbuPY\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:30:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"topic_id\": 6,\n        \"name\": \"Graph\",\n        \"description\": \"Nodes and Edges\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\"\n    },\n    {\n        \"topic_id\": 3,\n        \"name\": \"Sorting\",\n        \"description\": null,\n        \"logo\": \"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"\n    },\n    {\n        \"topic_id\": 2,\n        \"name\": \"Recursion\",\n        \"description\": null,\n        \"logo\": \"https://i.pinimg.com/originals/a1/2b/a8/a12ba80f3701ef4e7014001e6c1869ac.gif\"\n    },\n    {\n        \"topic_id\": 8,\n        \"name\": \"Tree\",\n        \"description\": null,\n        \"logo\": \"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcS7-pjys5IOotbaoxbBlxDklbg6YEPMwLcS0GOlOgRtEBWP_bQU\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Series",
			"item": [
				{
					"name": "AddSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"topic_id\": 2,\r\n    \"canvas_id\": 2,\r\n    \"name\": \"Tower Of Hanoi\",\r\n    \"description\": null,\r\n    \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\r\n    \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								""
							]
						},
						"description": "This endpoint makes an HTTP POST request to create a new series via the API.\n\n#### Request\n\nThe request should include a payload with the following parameters in raw JSON format:\n\n- `topic_id` (number): The ID of the topic associated with the series.\n- `canvas_id` (number): The ID of the canvas associated with the series.\n- `name` (string): The name of the series.\n- `description` (string, optional): The description of the series.\n- `logo` (string): The logo of the series.\n- `template` (string): The template for the series.\n    \n\n#### Response\n\nUpon successful execution, the endpoint returns a status code of 200 with an empty array as the response."
					},
					"response": [
						{
							"name": "AddSeries",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topic_id\": 2,\r\n    \"canvas_id\": 2,\r\n    \"name\": \"Tower Of Hanoi\",\r\n    \"description\": null,\r\n    \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\r\n    \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 10:02:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetSeries",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/2",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								"2"
							]
						},
						"description": "This HTTP GET request is used to retrieve information about a specific series with the given ID. The response will include details such as series ID, topic ID, canvas ID, name, description, logo, and template associated with the series.\n\n### Request\n\nThe request does not include a request body as it is a GET request and the series ID is included in the URL path parameter.\n\n- [Endpoint:<code>https://bitsunplugged-dev.onrender.com/api/series/:series_id</code>](https://bitsunplugged-dev.onrender.com/api/series/:series)\n- Method: `GET`\n    \n\n### Response\n\nThe response will have a status code of 200 and will contain an series object, which represents a series with its associated details. The details include:\n\n- `series_id`: The unique identifier for the series.\n- `topic_id`: The identifier for the topic associated with the series.\n- `canvas_id`: The identifier for the canvas associated with the series.\n- `name`: The name of the series.\n- `description`: The description of the series.\n- `logo`: The URL for the logo associated with the series.\n- `template`: The template or code snippet associated with the series."
					},
					"response": [
						{
							"name": "GetSeries",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/1",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "748"
								},
								{
									"key": "ETag",
									"value": "W/\"2ec-LLkDJ4Qlem8iTkefMYaYktX2Zrk\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 09:45:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"series_id\": 1,\n        \"topic_id\": 6,\n        \"canvas_id\": 1,\n        \"name\": \"Minimum Spanning Tree\",\n        \"description\": \"\",\n        \"logo\": \"https://blog-c7ff.kxcdn.com/blog/wp-content/uploads/2017/01/blog-10.jpg\",\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\"\n    }\n]"
						}
					]
				},
				{
					"name": "UpdateSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"series\": {\r\n        \"topic_id\": 2,\r\n        \"canvas_id\": 2,\r\n        \"name\": \"Tower Of Hanoi\",\r\n        \"description\": null,\r\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\r\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/2",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								"2"
							]
						},
						"description": "This endpoint makes an HTTP PUT request to update a specific series with the provided ID. The request should include a payload with the series details in the raw request body. The response will have a status code of 200 and an empty array as the data.\n\n### Request Body\n\n- series (object)\n    - topic_id (number): The ID of the topic associated with the series.\n    - canvas_id (number): The ID of the canvas associated with the series.\n    - name (string): The name of the series.\n    - description (string): The description of the series.\n    - logo (string): The URL or path to the series logo image.\n    - template (string): The template used for the series.\n\n### Response\n\n- Status: 200\n- Data: \\[\\]"
					},
					"response": [
						{
							"name": "UpdateSeries",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"series\": {\r\n        \"topic_id\": 2,\r\n        \"canvas_id\": 2,\r\n        \"name\": \"Tower Of Hanoi\",\r\n        \"description\": null,\r\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\r\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/2",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 09:50:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "DeleteSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/3",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								"3"
							]
						},
						"description": "This endpoint is used to delete a specific series with the given ID. The request does not contain a request body. Upon successful execution, the response will return a status code of 200 and an empty array as the response body."
					},
					"response": [
						{
							"name": "DeleteSeries",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/3",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 09:55:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetAllSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of series from the API. The request does not require a request body.\n\n### Request\n\nThe request does not include a request body as it is a GET request and the series ID is included in the URL path parameter.\n\n- [Endpoint:<code>https://bitsunplugged-dev.onrender.com/api/series/</code>](https://bitsunplugged-dev.onrender.com/api/series/:series)\n- Method: `GET`\n    \n\n### Response\n\nThe response will have a status code of 200 and will contain an array of objects, where each object represents a series with its associated details. The details include:\n\n- `series_id`: The unique identifier for the series.\n- `topic_id`: The identifier for the topic associated with the series.\n- `canvas_id`: The identifier for the canvas associated with the series.\n- `name`: The name of the series.\n- `description`: The description of the series.\n- `logo`: The URL for the logo associated with the series.\n- `template`: The template or code snippet associated with the series."
					},
					"response": [
						{
							"name": "GetAllSeries",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2052"
								},
								{
									"key": "ETag",
									"value": "W/\"804-P1HP6VQyQHYK84U5V2v333IKvwI\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 09:57:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"series_id\": 1,\n        \"topic_id\": 6,\n        \"canvas_id\": 1,\n        \"name\": \"Minimum Spanning Tree\",\n        \"description\": \"\",\n        \"logo\": \"https://blog-c7ff.kxcdn.com/blog/wp-content/uploads/2017/01/blog-10.jpg\",\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\"\n    },\n    {\n        \"series_id\": 4,\n        \"topic_id\": 6,\n        \"canvas_id\": 1,\n        \"name\": \"Planar Graph\",\n        \"description\": null,\n        \"logo\": \"https://media.springernature.com/lw685/springer-static/image/art%3A10.1007%2Fs00373-018-1932-6/MediaObjects/373_2018_1932_Fig3_HTML.png\",\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\"\n    },\n    {\n        \"series_id\": 2,\n        \"topic_id\": 2,\n        \"canvas_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetLiveSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/live",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								"live"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of live series from the API. The request does not require a request body.\n\n### Request\n\nThe request does not include a request body as it is a GET request and the series ID is included in the URL path parameter.\n\n- [Endpoint:<code>https://bitsunplugged-dev.onrender.com/api/series/live</code>](https://bitsunplugged-dev.onrender.com/api/series/:series)\n    \n- Method: `GET`\n    \n\n### Response\n\nThe response will have a status code of 200 and will contain an array of objects, where each object represents a series with its associated details. The details include:\n\n- `series_id`: The unique identifier for the series.\n    \n- `topic_id`: The identifier for the topic associated with the series.\n    \n- `canvas_id`: The identifier for the canvas associated with the series.\n    \n- `name`: The name of the series.\n    \n- `description`: The description of the series.\n    \n- `logo`: The URL for the logo associated with the series.\n    \n- `template`: The template or code snippet associated with the series."
					},
					"response": [
						{
							"name": "GetLiveSeries",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/live",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										"live"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2680"
								},
								{
									"key": "ETag",
									"value": "W/\"a78-Ha6QFHQwx1eUodIAtal0GLyNGuI\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:31:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"series_id\": 3,\n        \"topic_id\": 8,\n        \"name\": \"Red Black\",\n        \"description\": null,\n        \"logo\": \"https://ds055uzetaobb.cloudfront.net/brioche/uploads/DtAKvHZ65j-rb-1.png?width=1200\"\n    },\n    {\n        \"series_id\": 12,\n        \"topic_id\": 6,\n        \"name\": \"BFS\",\n        \"description\": null,\n        \"logo\": \"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*fYKrGW0IUeoS_8XtCoNaLw.gif\"\n    },\n    {\n        \"series_id\": 11,\n        \"topic_id\": 6,\n        \"name\": \"Max Flow Min Cut\",\n        \"description\": null,\n        \"logo\": \"https://uploads.toptal.io/blog/image/124061/toptal-blog-image-1503922944233-918c6faefd88554e45442287ce635def.gif\"\n    },\n    {\n        \"series_id\": 13,\n        \"topic_id\": 3,\n        \"name\": \"Bubble Sort\",\n        \"description\": null,\n        \"logo\": \"https://res.cloudinary.com/practicaldev/image/fetch/s--tZV8xTN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/p36pPuu.gif\"\n    },\n    {\n        \"series_id\": 14,\n        \"topic_id\": 3,\n        \"name\": \"Selection Sort\",\n        \"description\": null,\n        \"logo\": \"https://res.cloudinary.com/practicaldev/image/fetch/s--6bITq5rX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://i0.wp.com/algorithms.tutorialhorizon.com/files/2019/01/Selection-Sort-Gif.gif%3Fzoom%3D1.25%26fit%3D300%252C214%26ssl%3D1\"\n    },\n    {\n        \"series_id\": 15,\n        \"topic_id\": 3,\n        \"name\": \"Quick Sort\",\n        \"description\": null,\n        \"logo\": \"https://assets.digitalocean.com/articles/alligator/js/quick-sort/quick-sort-animation.gif\"\n    },\n    {\n        \"series_id\": 16,\n        \"topic_id\": 3,\n        \"name\": \"Merge Sort\",\n        \"description\": null,\n        \"logo\": \"https://assets.digitalocean.com/articles/alligator/js/understanding-merge-sort/merge-sort-animation.gif\"\n    },\n    {\n        \"series_id\": 2,\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    },\n    {\n        \"series_id\": 7,\n        \"topic_id\": 2,\n        \"name\": \"N Queen\",\n        \"description\": null,\n        \"logo\": \"https://meetwithbudhi.files.wordpress.com/2019/09/prog.gif\"\n    },\n    {\n        \"series_id\": 8,\n        \"topic_id\": 6,\n        \"name\": \"Shortest Path\",\n        \"description\": null,\n        \"logo\": \"https://www.get-digital-help.com/wp-content/uploads/2014/05/Find-shortest-path4.gif\"\n    },\n    {\n        \"series_id\": 9,\n        \"topic_id\": 6,\n        \"name\": \"Bipartite Graph\",\n        \"description\": null,\n        \"logo\": \"https://miro.medium.com/v2/resize:fit:588/0*PWKRBToddj9I36q4.gif\"\n    },\n    {\n        \"series_id\": 1,\n        \"topic_id\": 6,\n        \"name\": \"Minimum Spanning Tree\",\n        \"description\": \"\",\n        \"logo\": \"https://blog-c7ff.kxcdn.com/blog/wp-content/uploads/2017/01/blog-10.jpg\"\n    },\n    {\n        \"series_id\": 5,\n        \"topic_id\": 6,\n        \"name\": \"Graph Coloring\",\n        \"description\": null,\n        \"logo\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Petersen_graph_3-coloring.svg/800px-Petersen_graph_3-coloring.svg.png\"\n    },\n    {\n        \"series_id\": 4,\n        \"topic_id\": 6,\n        \"name\": \"Planar Graph\",\n        \"description\": null,\n        \"logo\": \"https://miro.medium.com/v2/resize:fit:1400/1*Xo-W6UucD0e2gmOB5wescg.gif\"\n    },\n    {\n        \"series_id\": 10,\n        \"topic_id\": 6,\n        \"name\": \"Isomorphism\",\n        \"description\": null,\n        \"logo\": \"https://images.squarespace-cdn.com/content/v1/52b30f7ae4b067ba989438d4/1419401410738-XTMSALY9255E01WH06Y1/image-asset.gif\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetProblems",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/series/2/problems",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"series",
								"2",
								"problems"
							]
						},
						"description": "This API endpoint makes an HTTP GET request to retrieve a list of problems related to the series with thr given id.\n\n### Request\n\nThe call to this request does not require a request body.\n\n### Response\n\nThe response had a status code of 200. The response included an array of problem objects, each containing the aforementioned details.\n\nFor example, the in the given call each problem object contains details such as problem ID, series ID, author ID, title, statement, canvas data, live status, creation time, solution checker, parameters, UI parameters, control parameters, canvas ID, submit state ID, and serial number."
					},
					"response": [
						{
							"name": "GetProblems",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/series/2/problems",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"series",
										"2",
										"problems"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "4860"
								},
								{
									"key": "ETag",
									"value": "W/\"12fc-CtjpG8lZAwYBHE4dqSJO3djKjHA\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 10:05:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"creation_time\": \"1694059054029\",\n        \"solution_checker\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5\n    },\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": true,\n        \"creation_time\": \"1700994610385\",\n        \"solution_checker\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"creation_time\": \"1701438806364\",\n        \"solution_checker\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"creation_time\": \"1701439115392\",\n        \"solution_checker\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"creation_time\": \"1701441086141\",\n        \"solution_checker\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Problem",
			"item": [
				{
					"name": "GetAllProblems",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of problems from the server. The response will contain an array of objects, each representing a specific problem. Each problem object includes various attributes such as problem_id, series_id, author_id, title, statement, canvas_data, is_live, last_updated, checker_code, params, ui_params, control_params, canvas_id, submit_state_id, serial_no, checker_type, and checker_canvas. The status of the last execution was 200.\n\nThe response will provide detailed information about each problem, including its unique identifier, series, author, title, statement, canvas data, live status, update timestamp, code checker, parameters, UI parameters, control parameters, canvas identifier, submission state identifier, serial number, checker type, and checker canvas details."
					},
					"response": [
						{
							"name": "GetAllProblems",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "26582"
								},
								{
									"key": "ETag",
									"value": "W/\"67d6-/SGV4wbY1Y/aFqhd/XhDIHZGOB0\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 10:17:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1700994610385\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    2\n                ],\n                [\n                    1\n                ],\n                [\n                    0\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701439115392\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 7,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 108,\n        \"series_id\": 5,\n        \"author_id\": 1,\n        \"title\": \"Coloring\",\n        \"statement\": \"Draw the graph with only 3 colors. **No nodes should be left to default color.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"8\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"9\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"7\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"8\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"8\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"4\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 198.79998779296875,\n                    \"y\": 232,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 444.79998779296875,\n                    \"y\": 39,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 683.7999877929688,\n                    \"y\": 233,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 310.79998779296875,\n                    \"y\": 431,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 590.7999877929688,\n                    \"y\": 428,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"5\": {\n                    \"x\": 311.79998779296875,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"6\": {\n                    \"x\": 446.79998779296875,\n                    \"y\": 142,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"7\": {\n                    \"x\": 579.7999877929688,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"8\": {\n                    \"x\": 362.79998779296875,\n                    \"y\": 344,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"9\": {\n                    \"x\": 539.7999877929688,\n                    \"y\": 345,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704294858807\",\n        \"checker_code\": \"/**\\r\\n *\\r\\n * @param {Object} data - An object containing nodes and edges properties.\\r\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\r\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\r\\n * @returns {boolean} True if the solution is valid, otherwise false.\\r\\n */\\r\\nfunction solutionChecker(data) {\\r\\n  // const edges =  data.edges.map(edge => ({\\r\\n\\t// \\tstart: edge.start.nodeIndex,\\r\\n\\t// \\tend: edge.end.nodeIndex,\\r\\n\\t// \\tweight: edge.weight\\r\\n  // }));\\r\\n  \\r\\n\\r\\n  const allEdgesHaveDifferentColors = data.edges.every(\\r\\n    edge => data.nodes[edge.start].color !== data.nodes[edge.end].color && data.nodes[edge.end].color !== \\\"Default\\\"); \\r\\n\\r\\n  const uniqueColorsSet = new Set();\\r\\n  data.edges.forEach(edge => {\\r\\n    uniqueColorsSet.add(data.nodes[edge.start].color);\\r\\n    uniqueColorsSet.add(data.nodes[edge.end].color);\\r\\n  });\\r\\n\\r\\n  const numberOfUniqueColors = uniqueColorsSet.size;\\r\\n\\r\\n  return allEdgesHaveDifferentColors && numberOfUniqueColors == 3;\\r\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_color\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 12,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 99,\n        \"series_id\": 9,\n        \"author_id\": 1,\n        \"title\": \"Bipartition\",\n        \"statement\": \"Remove minimum possible edges, such that the graph is a bipartite graph.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1704109169798\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 10,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 74,\n        \"series_id\": 4,\n        \"author_id\": 1,\n        \"title\": \"Rearrange\",\n        \"statement\": \"Drag the nodes to make the graph a plane graph. In a plane graph there is no crossing edges.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1702049450177\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction isIntersecting(a, b, c, d) {\\n    // Returns true if line segment (a, b) intersects with line segment (c, d)\\n    function ccw(a, b, c) {\\n        return (c.y - a.y) * (b.x - a.x) > (b.y - a.y) * (c.x - a.x);\\n    }\\n\\n    return (\\n        ccw(a, c, d) !== ccw(b, c, d) &&\\n        ccw(a, b, c) !== ccw(a, b, d)\\n    );\\n}\\n\\n\\nfunction hasCommonNode(edgeA, edgeB) {\\n    return (\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.end) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.end)\\n    );\\n}\\n\\nfunction solutionChecker(data) {\\n    const nodes = data.nodes;\\n    const edges = data.edges;\\n\\n    for (let i = 0; i < edges.length; i++) {\\n        const edgeA = edges[i];\\n        \\n        const startA = nodes[edgeA.start.nodeIndex];\\n        const endA = nodes[edgeA.end.nodeIndex];\\n\\n        for (let j = i + 1; j < edges.length; j++) {\\n            const edgeB = edges[j];\\n\\n            const startB = nodes[edgeB.start.nodeIndex];\\n            const endB = nodes[edgeB.end.nodeIndex];\\n\\n            if (\\n                isIntersecting(startA, endA, startB, endB) &&\\n                !hasCommonNode(edgeA, edgeB)\\n            ) {\\n                // console.log(startA.x,startA.y,  startB.x, startB.y, endA.x, endA.y, endB.x, endB.y)\\n                return false;\\n            }\\n        }\\n    }\\n\\n    // No intersections found, it's a plane graph\\n    return true;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 4,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 98,\n        \"series_id\": 8,\n        \"author_id\": 1,\n        \"title\": \"Shorter Path\",\n        \"statement\": \"Select the edges that forms the shortest path from 0 to 6.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704106904024\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 9,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 106,\n        \"series_id\": null,\n        \"author_id\": 1,\n        \"title\": \"Pentagon and Pentagram\",\n        \"statement\": \"Convert the Pentagram to a Pentagon.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"3\",\n                    \"end\": \"0\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"4\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"0\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 430.79998779296875,\n                    \"y\": 40.19999694824219,\n                    \"label\": \"\"\n                },\n                \"1\": {\n                    \"x\": 599.7999877929688,\n                    \"y\": 145.1999969482422,\n                    \"label\": \"\"\n                },\n                \"2\": {\n                    \"x\": 274.79998779296875,\n                    \"y\": 146.1999969482422,\n                    \"label\": \"\"\n                },\n                \"3\": {\n                    \"x\": 324.79998779296875,\n                    \"y\": 330.1999969482422,\n                    \"label\": \"\"\n                },\n                \"4\": {\n                    \"x\": 545.7999877929688,\n                    \"y\": 332.1999969482422,\n                    \"label\": \"\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1704286616591\",\n        \"checker_code\": \"/**\\r\\n *\\r\\n * @param {Object} data - An object containing nodes and edges properties.\\r\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\r\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\r\\n * @returns {boolean} True if the solution is valid, otherwise false.\\r\\n */\\r\\n\\r\\nfunction isIntersecting(a, b, c, d) {\\r\\n    // Returns true if line segment (a, b) intersects with line segment (c, d)\\r\\n    function ccw(a, b, c) {\\r\\n        return (c.y - a.y) * (b.x - a.x) > (b.y - a.y) * (c.x - a.x);\\r\\n    }\\r\\n\\r\\n    return (\\r\\n        ccw(a, c, d) !== ccw(b, c, d) &&\\r\\n        ccw(a, b, c) !== ccw(a, b, d)\\r\\n    );\\r\\n}\\r\\n\\r\\n\\r\\nfunction hasCommonNode(edgeA, edgeB) {\\r\\n    return (\\r\\n        edgeA.start === edgeB.start ||\\r\\n        edgeA.start === edgeB.end ||\\r\\n        edgeA.end === edgeB.start ||\\r\\n        edgeA.end === edgeB.end\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction solutionChecker(data) {\\r\\n    const nodes = data.nodes;\\r\\n    const edges = data.edges;\\r\\n\\r\\n    for (let i = 0; i < edges.length; i++) {\\r\\n        const edgeA = edges[i];\\r\\n        \\r\\n        const startA = nodes[edgeA.start];\\r\\n        const endA = nodes[edgeA.end];\\r\\n\\r\\n        for (let j = i + 1; j < edges.length; j++) {\\r\\n            const edgeB = edges[j];\\r\\n\\r\\n            const startB = nodes[edgeB.start];\\r\\n            const endB = nodes[edgeB.end];\\r\\n\\r\\n            if (\\r\\n                isIntersecting(startA, endA, startB, endB) &&\\r\\n                !hasCommonNode(edgeA, edgeB)\\r\\n            ) {\\r\\n                // console.log(startA.x,startA.y,  startB.x, startB.y, endA.x, endA.y, endB.x, endB.y)\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // No intersections found, it's a plane graph\\r\\n    return true;\\r\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": null,\n        \"serial_no\": 0,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 103,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction 2\",\n        \"statement\": \"Similar to version 1.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704230123238\",\n        \"checker_code\": \"/**\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction createGraph(edges) {\\n  const graph = new Map();\\n  for (const edge of edges) {\\n    const { start, end, weight } = edge;\\n\\n    if (!graph.has(start)) {\\n      graph.set(start, []);\\n    }\\n\\n    if (!graph.has(end)) {\\n      graph.set(end, []);\\n    }\\n\\n    graph.get(start).push({ value: end, weight: parseInt(weight) });\\n    graph.get(end).push({ value: start, weight: parseInt(weight) });\\n  }\\n  return graph;\\n}\\nfunction getCost(graph) {\\n  // Step 3: Implement DFS to check if the graph is disconnected\\n  function isDisconnected() {\\n    const visited = new Set();\\n    const nodes = [...graph.keys()];\\n\\n    function dfs(node) {\\n      visited.add(node);\\n      for (const neighbor of graph.get(node)) {\\n        if (!visited.has(neighbor.value)) {\\n          dfs(neighbor.value);\\n        }\\n      }\\n    }\\n    dfs(nodes[0]); // Start DFS from the first node\\n    return visited.size !== nodes.length;\\n  }\\n\\n  const disconnected = isDisconnected();\\n\\n  // Step 4: Calculate the sum of edge weights\\n  function sumEdgeWeights() {\\n    let sum = 0;\\n    for (const edges of graph.values()) {\\n      for (const edge of edges) {\\n        sum += edge.weight;\\n      }\\n    }\\n    return sum / 2;\\n  }\\n\\n  if (disconnected) return -1;\\n\\n  const edgeWeightSum = sumEdgeWeights();\\n  return edgeWeightSum;\\n}\\nfunction solutionChecker(user_data, solution_data) {\\n  const user_graph = createGraph(user_data.selectedEdges);\\n  const setter_graph = createGraph(solution_data.selectedEdges);\\n\\n  if (Object.keys(user_graph).length !== Object.keys(user_graph).length)\\n    return false;\\n  const user_cost = getCost(user_graph);\\n  const setter_cost = getCost(setter_graph);\\n  console.log(user_cost);\\n  if (user_cost !== -1 && user_cost === setter_cost) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 11,\n        \"serial_no\": 2,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 30,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction\",\n        \"statement\": \"There are 5 cities numbered from 0 to 4. We can construct roads between cities. Each road has a number associated with it denoting the cost to construct a road. We want to minimize our cost. **Select the roads from the given canvas in a way that from every city we can go to every other city and cost of constructing the roads are minimum.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694032352472\",\n        \"checker_code\": \"/**\\n * @param {Object} data (user_data/solution_data) - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - HashMap of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end, weight properties.\\n * @param {Array} data.selectedEdges - Array of selectedEdges. Where each edge is an object with start, end, weight properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(user_data, solution_data) {\\n  return JSON.stringify(user_data) === JSON.stringify(solution_data);\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 3,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 109,\n        \"series_id\": null,\n        \"author_id\": 1,\n        \"title\": \"assa\",\n        \"statement\": \"\",\n        \"canvas_data\": null,\n        \"is_live\": false,\n        \"last_updated\": \"1704299670539\",\n        \"checker_code\": \"function solutionChecker(data) {}\",\n        \"params\": null,\n        \"ui_params\": null,\n        \"control_params\": null,\n        \"canvas_id\": null,\n        \"submit_state_id\": null,\n        \"serial_no\": 0,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    }\n]"
						}
					]
				},
				{
					"name": "SubmittedProblems",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/submitted",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"submitted"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of submitted problems. The response will include an array of objects, each representing a submitted problem. Each object contains various properties such as problem_id, series_id, author_id, title, statement, canvas_data, is_live, last_updated, checker_code, params, ui_params, control_params, canvas_id, submit_state_id, serial_no, checker_type, and checker_canvas. The status of the last execution was 200."
					},
					"response": [
						{
							"name": "SubmittedProblems",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/submitted",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"submitted"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "23032"
								},
								{
									"key": "ETag",
									"value": "W/\"59f8-9U/zNGBl7nYXARPLOO4GQhW+xxM\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:02:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1700994610385\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    2\n                ],\n                [\n                    1\n                ],\n                [\n                    0\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701439115392\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 7,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 108,\n        \"series_id\": 5,\n        \"author_id\": 1,\n        \"title\": \"Coloring\",\n        \"statement\": \"Draw the graph with only 3 colors. **No nodes should be left to default color.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"8\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"9\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"7\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"8\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"8\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"4\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 198.79998779296875,\n                    \"y\": 232,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 444.79998779296875,\n                    \"y\": 39,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 683.7999877929688,\n                    \"y\": 233,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 310.79998779296875,\n                    \"y\": 431,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 590.7999877929688,\n                    \"y\": 428,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"5\": {\n                    \"x\": 311.79998779296875,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"6\": {\n                    \"x\": 446.79998779296875,\n                    \"y\": 142,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"7\": {\n                    \"x\": 579.7999877929688,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"8\": {\n                    \"x\": 362.79998779296875,\n                    \"y\": 344,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"9\": {\n                    \"x\": 539.7999877929688,\n                    \"y\": 345,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704294858807\",\n        \"checker_code\": \"/**\\r\\n *\\r\\n * @param {Object} data - An object containing nodes and edges properties.\\r\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\r\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\r\\n * @returns {boolean} True if the solution is valid, otherwise false.\\r\\n */\\r\\nfunction solutionChecker(data) {\\r\\n  // const edges =  data.edges.map(edge => ({\\r\\n\\t// \\tstart: edge.start.nodeIndex,\\r\\n\\t// \\tend: edge.end.nodeIndex,\\r\\n\\t// \\tweight: edge.weight\\r\\n  // }));\\r\\n  \\r\\n\\r\\n  const allEdgesHaveDifferentColors = data.edges.every(\\r\\n    edge => data.nodes[edge.start].color !== data.nodes[edge.end].color && data.nodes[edge.end].color !== \\\"Default\\\"); \\r\\n\\r\\n  const uniqueColorsSet = new Set();\\r\\n  data.edges.forEach(edge => {\\r\\n    uniqueColorsSet.add(data.nodes[edge.start].color);\\r\\n    uniqueColorsSet.add(data.nodes[edge.end].color);\\r\\n  });\\r\\n\\r\\n  const numberOfUniqueColors = uniqueColorsSet.size;\\r\\n\\r\\n  return allEdgesHaveDifferentColors && numberOfUniqueColors == 3;\\r\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_color\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 12,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 99,\n        \"series_id\": 9,\n        \"author_id\": 1,\n        \"title\": \"Bipartition\",\n        \"statement\": \"Remove minimum possible edges, such that the graph is a bipartite graph.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1704109169798\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 10,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 74,\n        \"series_id\": 4,\n        \"author_id\": 1,\n        \"title\": \"Rearrange\",\n        \"statement\": \"Drag the nodes to make the graph a plane graph. In a plane graph there is no crossing edges.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1702049450177\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction isIntersecting(a, b, c, d) {\\n    // Returns true if line segment (a, b) intersects with line segment (c, d)\\n    function ccw(a, b, c) {\\n        return (c.y - a.y) * (b.x - a.x) > (b.y - a.y) * (c.x - a.x);\\n    }\\n\\n    return (\\n        ccw(a, c, d) !== ccw(b, c, d) &&\\n        ccw(a, b, c) !== ccw(a, b, d)\\n    );\\n}\\n\\n\\nfunction hasCommonNode(edgeA, edgeB) {\\n    return (\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.end) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.end)\\n    );\\n}\\n\\nfunction solutionChecker(data) {\\n    const nodes = data.nodes;\\n    const edges = data.edges;\\n\\n    for (let i = 0; i < edges.length; i++) {\\n        const edgeA = edges[i];\\n        \\n        const startA = nodes[edgeA.start.nodeIndex];\\n        const endA = nodes[edgeA.end.nodeIndex];\\n\\n        for (let j = i + 1; j < edges.length; j++) {\\n            const edgeB = edges[j];\\n\\n            const startB = nodes[edgeB.start.nodeIndex];\\n            const endB = nodes[edgeB.end.nodeIndex];\\n\\n            if (\\n                isIntersecting(startA, endA, startB, endB) &&\\n                !hasCommonNode(edgeA, edgeB)\\n            ) {\\n                // console.log(startA.x,startA.y,  startB.x, startB.y, endA.x, endA.y, endB.x, endB.y)\\n                return false;\\n            }\\n        }\\n    }\\n\\n    // No intersections found, it's a plane graph\\n    return true;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 4,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    },\n    {\n        \"problem_id\": 98,\n        \"series_id\": 8,\n        \"author_id\": 1,\n        \"title\": \"Shorter Path\",\n        \"statement\": \"Select the edges that forms the shortest path from 0 to 6.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704106904024\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 9,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 103,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction 2\",\n        \"statement\": \"Similar to version 1.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704230123238\",\n        \"checker_code\": \"/**\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction createGraph(edges) {\\n  const graph = new Map();\\n  for (const edge of edges) {\\n    const { start, end, weight } = edge;\\n\\n    if (!graph.has(start)) {\\n      graph.set(start, []);\\n    }\\n\\n    if (!graph.has(end)) {\\n      graph.set(end, []);\\n    }\\n\\n    graph.get(start).push({ value: end, weight: parseInt(weight) });\\n    graph.get(end).push({ value: start, weight: parseInt(weight) });\\n  }\\n  return graph;\\n}\\nfunction getCost(graph) {\\n  // Step 3: Implement DFS to check if the graph is disconnected\\n  function isDisconnected() {\\n    const visited = new Set();\\n    const nodes = [...graph.keys()];\\n\\n    function dfs(node) {\\n      visited.add(node);\\n      for (const neighbor of graph.get(node)) {\\n        if (!visited.has(neighbor.value)) {\\n          dfs(neighbor.value);\\n        }\\n      }\\n    }\\n    dfs(nodes[0]); // Start DFS from the first node\\n    return visited.size !== nodes.length;\\n  }\\n\\n  const disconnected = isDisconnected();\\n\\n  // Step 4: Calculate the sum of edge weights\\n  function sumEdgeWeights() {\\n    let sum = 0;\\n    for (const edges of graph.values()) {\\n      for (const edge of edges) {\\n        sum += edge.weight;\\n      }\\n    }\\n    return sum / 2;\\n  }\\n\\n  if (disconnected) return -1;\\n\\n  const edgeWeightSum = sumEdgeWeights();\\n  return edgeWeightSum;\\n}\\nfunction solutionChecker(user_data, solution_data) {\\n  const user_graph = createGraph(user_data.selectedEdges);\\n  const setter_graph = createGraph(solution_data.selectedEdges);\\n\\n  if (Object.keys(user_graph).length !== Object.keys(user_graph).length)\\n    return false;\\n  const user_cost = getCost(user_graph);\\n  const setter_cost = getCost(setter_graph);\\n  console.log(user_cost);\\n  if (user_cost !== -1 && user_cost === setter_cost) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 11,\n        \"serial_no\": 2,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 30,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction\",\n        \"statement\": \"There are 5 cities numbered from 0 to 4. We can construct roads between cities. Each road has a number associated with it denoting the cost to construct a road. We want to minimize our cost. **Select the roads from the given canvas in a way that from every city we can go to every other city and cost of constructing the roads are minimum.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694032352472\",\n        \"checker_code\": \"/**\\n * @param {Object} data (user_data/solution_data) - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - HashMap of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end, weight properties.\\n * @param {Array} data.selectedEdges - Array of selectedEdges. Where each edge is an object with start, end, weight properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(user_data, solution_data) {\\n  return JSON.stringify(user_data) === JSON.stringify(solution_data);\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 3,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "BySeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_series/1",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"by_series",
								"1"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a problem by series ID. The response will include details of the problem, such as problem ID, series ID, author ID, title, statement, canvas data, live status, last updated timestamp, checker code, parameters, UI parameters, control parameters, canvas ID, submit state ID, serial number, checker type, checker canvas, series name, and topic name."
					},
					"response": [
						{
							"name": "BySeries",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_series/1",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"by_series",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7625"
								},
								{
									"key": "ETag",
									"value": "W/\"1dc9-Zw8lzhu77DRa1d6omyuGe2Xz7j0\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:03:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 103,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction 2\",\n        \"statement\": \"Similar to version 1.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704230123238\",\n        \"checker_code\": \"/**\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction createGraph(edges) {\\n  const graph = new Map();\\n  for (const edge of edges) {\\n    const { start, end, weight } = edge;\\n\\n    if (!graph.has(start)) {\\n      graph.set(start, []);\\n    }\\n\\n    if (!graph.has(end)) {\\n      graph.set(end, []);\\n    }\\n\\n    graph.get(start).push({ value: end, weight: parseInt(weight) });\\n    graph.get(end).push({ value: start, weight: parseInt(weight) });\\n  }\\n  return graph;\\n}\\nfunction getCost(graph) {\\n  // Step 3: Implement DFS to check if the graph is disconnected\\n  function isDisconnected() {\\n    const visited = new Set();\\n    const nodes = [...graph.keys()];\\n\\n    function dfs(node) {\\n      visited.add(node);\\n      for (const neighbor of graph.get(node)) {\\n        if (!visited.has(neighbor.value)) {\\n          dfs(neighbor.value);\\n        }\\n      }\\n    }\\n    dfs(nodes[0]); // Start DFS from the first node\\n    return visited.size !== nodes.length;\\n  }\\n\\n  const disconnected = isDisconnected();\\n\\n  // Step 4: Calculate the sum of edge weights\\n  function sumEdgeWeights() {\\n    let sum = 0;\\n    for (const edges of graph.values()) {\\n      for (const edge of edges) {\\n        sum += edge.weight;\\n      }\\n    }\\n    return sum / 2;\\n  }\\n\\n  if (disconnected) return -1;\\n\\n  const edgeWeightSum = sumEdgeWeights();\\n  return edgeWeightSum;\\n}\\nfunction solutionChecker(user_data, solution_data) {\\n  const user_graph = createGraph(user_data.selectedEdges);\\n  const setter_graph = createGraph(solution_data.selectedEdges);\\n\\n  if (Object.keys(user_graph).length !== Object.keys(user_graph).length)\\n    return false;\\n  const user_cost = getCost(user_graph);\\n  const setter_cost = getCost(setter_graph);\\n  console.log(user_cost);\\n  if (user_cost !== -1 && user_cost === setter_cost) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 11,\n        \"serial_no\": 2,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                }\n            ]\n        },\n        \"series_name\": \"Minimum Spanning Tree\",\n        \"topic_name\": \"Graph\"\n    },\n    {\n        \"problem_id\": 30,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction\",\n        \"statement\": \"There are 5 cities numbered from 0 to 4. We can construct roads between cities. Each road has a number associated with it denoting the cost to construct a road. We want to minimize our cost. **Select the roads from the given canvas in a way that from every city we can go to every other city and cost of constructing the roads are minimum.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694032352472\",\n        \"checker_code\": \"/**\\n * @param {Object} data (user_data/solution_data) - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - HashMap of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end, weight properties.\\n * @param {Array} data.selectedEdges - Array of selectedEdges. Where each edge is an object with start, end, weight properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(user_data, solution_data) {\\n  return JSON.stringify(user_data) === JSON.stringify(solution_data);\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 3,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        },\n        \"series_name\": \"Minimum Spanning Tree\",\n        \"topic_name\": \"Graph\"\n    }\n]"
						}
					]
				},
				{
					"name": "BySeriesUnsolved",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_series/unsolved/1",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"by_series",
								"unsolved",
								"1"
							]
						},
						"description": "This endpoint retrieves a list of unsolved problems by series ID. It makes an HTTP GET request to the specified URL.\n\nThe response will include an array of objects, each representing a problem. Each problem object contains various attributes such as problem_id, series_id, author_id, title, statement, canvas_data, is_live, last_updated, checker_code, params, ui_params, control_params, canvas_id, submit_state_id, serial_no, checker_type, checker_canvas, series_name, and topic_name.\n\nThe response will also include detailed information about the problem, including the canvas data, parameters, UI parameters, control parameters, and checker canvas.\n\nThe last call to this request did not include a request body.\n\nThe last execution returned a status code of 200 along with the array of problem objects."
					},
					"response": [
						{
							"name": "BySeriesUnsolved",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_series/unsolved/1",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"by_series",
										"unsolved",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "4693"
								},
								{
									"key": "ETag",
									"value": "W/\"1255-BQU1Tdz94tGqOS9d4cG5hqyeyCw\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:04:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 103,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction 2\",\n        \"statement\": \"Similar to version 1.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704230123238\",\n        \"checker_code\": \"/**\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction createGraph(edges) {\\n  const graph = new Map();\\n  for (const edge of edges) {\\n    const { start, end, weight } = edge;\\n\\n    if (!graph.has(start)) {\\n      graph.set(start, []);\\n    }\\n\\n    if (!graph.has(end)) {\\n      graph.set(end, []);\\n    }\\n\\n    graph.get(start).push({ value: end, weight: parseInt(weight) });\\n    graph.get(end).push({ value: start, weight: parseInt(weight) });\\n  }\\n  return graph;\\n}\\nfunction getCost(graph) {\\n  // Step 3: Implement DFS to check if the graph is disconnected\\n  function isDisconnected() {\\n    const visited = new Set();\\n    const nodes = [...graph.keys()];\\n\\n    function dfs(node) {\\n      visited.add(node);\\n      for (const neighbor of graph.get(node)) {\\n        if (!visited.has(neighbor.value)) {\\n          dfs(neighbor.value);\\n        }\\n      }\\n    }\\n    dfs(nodes[0]); // Start DFS from the first node\\n    return visited.size !== nodes.length;\\n  }\\n\\n  const disconnected = isDisconnected();\\n\\n  // Step 4: Calculate the sum of edge weights\\n  function sumEdgeWeights() {\\n    let sum = 0;\\n    for (const edges of graph.values()) {\\n      for (const edge of edges) {\\n        sum += edge.weight;\\n      }\\n    }\\n    return sum / 2;\\n  }\\n\\n  if (disconnected) return -1;\\n\\n  const edgeWeightSum = sumEdgeWeights();\\n  return edgeWeightSum;\\n}\\nfunction solutionChecker(user_data, solution_data) {\\n  const user_graph = createGraph(user_data.selectedEdges);\\n  const setter_graph = createGraph(solution_data.selectedEdges);\\n\\n  if (Object.keys(user_graph).length !== Object.keys(user_graph).length)\\n    return false;\\n  const user_cost = getCost(user_graph);\\n  const setter_cost = getCost(setter_graph);\\n  console.log(user_cost);\\n  if (user_cost !== -1 && user_cost === setter_cost) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 11,\n        \"serial_no\": 2,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"3\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"5\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"4\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"6\",\n                    \"weight\": \"5\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 142,\n                    \"y\": 196,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 274,\n                    \"y\": 45,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 284,\n                    \"y\": 357,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 492,\n                    \"y\": 358,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 498,\n                    \"y\": 41,\n                    \"label\": 4\n                },\n                \"5\": {\n                    \"x\": 391,\n                    \"y\": 197,\n                    \"label\": 5\n                },\n                \"6\": {\n                    \"x\": 652,\n                    \"y\": 205,\n                    \"label\": 6\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"2\",\n                    \"weight\": \"5\"\n                }\n            ]\n        },\n        \"series_name\": \"Minimum Spanning Tree\",\n        \"topic_name\": \"Graph\"\n    }\n]"
						}
					]
				},
				{
					"name": "ByTopic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_topic/2",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"by_topic",
								"2"
							]
						},
						"description": "This API endpoint makes an HTTP GET request to retrieve a list of problems based on a specific topic. The request should be made to [https://bitsunplugged-dev.onrender.com/api/problem/by_topic/2](https://bitsunplugged-dev.onrender.com/api/problem/by_topic/2).\n\nThe response will include a JSON array containing objects with information about each problem. Each object includes details such as problem ID, series ID, author ID, title, statement, canvas data, live status, last updated timestamp, checker code, parameters, UI parameters, control parameters, canvas ID, submit state ID, serial number, checker type, checker canvas, topic ID, name, description, and logo.\n\nThe response status for the last execution was 200."
					},
					"response": [
						{
							"name": "ByTopic",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/by_topic/2",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"by_topic",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "5771"
								},
								{
									"key": "ETag",
									"value": "W/\"168b-dnW4Y+hBKGGNnrKnrDiA4S4Zg7c\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:05:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1700994610385\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    2\n                ],\n                [\n                    1\n                ],\n                [\n                    0\n                ]\n            ]\n        },\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        },\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701439115392\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 7,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2\n                ]\n            ]\n        },\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        },\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"topic_id\": 2,\n        \"name\": \"Tower Of Hanoi\",\n        \"description\": null,\n        \"logo\": \"/gifs/toh_light.gif\"\n    }\n]"
						}
					]
				},
				{
					"name": "AddProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"series_id\": 2,\r\n        \"author_id\": 1,\r\n        \"title\": \"Reverse the Disks 2\",\r\n        \"statement\": \"Reverse the 3 disks.\",\r\n        \"canvas_data\": {\r\n            \"numberOfMoves\": 0,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    0\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    2\r\n                ]\r\n            ]\r\n        },\"is_live\": false,\r\n        \"last_updated\": \"1700994610385\",\r\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\r\n        \"params\": {\r\n            \"custom_disk\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"ordered\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"ui_params\": {\r\n            \"moves\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"n_disks\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"custom_disk\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"undo\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"control_params\": {},\r\n        \"canvas_id\": 2,\r\n        \"submit_state_id\": 8,\r\n        \"serial_no\": 1,\r\n        \"checker_type\": 1,\r\n        \"checker_canvas\": {\r\n            \"numberOfMoves\": 3,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    2\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    0\r\n                ]\r\n            ]\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								""
							]
						},
						"description": "### Create a Problem\n\nThis API endpoint allows you to create a new problem.\n\n#### Request Body\n\n- `series_id` (integer): The ID of the series.\n- `author_id` (integer): The ID of the author.\n- `title` (string): The title of the problem.\n- `statement` (string): The statement of the problem.\n- `canvas_data` (object): Data related to the canvas including the number of moves, disks, pegs, and their configuration.\n- `is_live` (boolean): Indicates if the problem is live.\n- `last_updated` (string): Timestamp of the last update.\n- `checker_code` (string): The checker code for the problem.\n- `params` (object): Additional parameters for the problem.\n    \n- `ui_params` (object): UI parameters for the problem.\n    \n- `control_params` (object): Control parameters for the problem.\n- `canvas_id` (integer): The ID of the canvas.\n- `submit_state_id` (integer): The ID of the submit state.\n- `serial_no` (integer): The serial number.\n- `checker_type` (integer): The type of the checker.\n- `checker_canvas` (object): Data related to the checker canvas including the number of moves, disks, pegs, and their configuration.\n    \n\n#### Response\n\nUpon successful creation, the API returns the ID of the newly created problem."
					},
					"response": [
						{
							"name": "AddProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"series_id\": 2,\r\n        \"author_id\": 1,\r\n        \"title\": \"Reverse the Disks 2\",\r\n        \"statement\": \"Reverse the 3 disks.\",\r\n        \"canvas_data\": {\r\n            \"numberOfMoves\": 0,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    0\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    2\r\n                ]\r\n            ]\r\n        },\"is_live\": false,\r\n        \"last_updated\": \"1700994610385\",\r\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\r\n        \"params\": {\r\n            \"custom_disk\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"ordered\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"ui_params\": {\r\n            \"moves\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"n_disks\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"custom_disk\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"undo\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"control_params\": {},\r\n        \"canvas_id\": 2,\r\n        \"submit_state_id\": 8,\r\n        \"serial_no\": 1,\r\n        \"checker_type\": 1,\r\n        \"checker_canvas\": {\r\n            \"numberOfMoves\": 3,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    2\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    0\r\n                ]\r\n            ]\r\n        }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "20"
								},
								{
									"key": "ETag",
									"value": "W/\"14-q1KTtUTZXhk3W3X6NQ/N48ZgxMI\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:14:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 110\n    }\n]"
						}
					]
				},
				{
					"name": "GetProblemById",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/74",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"74"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve details of a specific problem with the given ID .\n\n### Response\n\nThe response will be a JSON array containing the details of the problem, including its ID, series ID, author ID, title, statement, canvas data, and various parameters related to the problem. The response will also include control parameters specific to the canvas."
					},
					"response": [
						{
							"name": "GetProblemById",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/74",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"74"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2788"
								},
								{
									"key": "ETag",
									"value": "W/\"ae4-IFJbwwxwL/9aknwLsep0swMtY7U\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:19:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 74,\n        \"series_id\": 4,\n        \"author_id\": 1,\n        \"title\": \"Rearrange\",\n        \"statement\": \"Drag the nodes to make the graph a plane graph. In a plane graph there is no crossing edges.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1702049450177\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction isIntersecting(a, b, c, d) {\\n    // Returns true if line segment (a, b) intersects with line segment (c, d)\\n    function ccw(a, b, c) {\\n        return (c.y - a.y) * (b.x - a.x) > (b.y - a.y) * (c.x - a.x);\\n    }\\n\\n    return (\\n        ccw(a, c, d) !== ccw(b, c, d) &&\\n        ccw(a, b, c) !== ccw(a, b, d)\\n    );\\n}\\n\\n\\nfunction hasCommonNode(edgeA, edgeB) {\\n    return (\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.end) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.end)\\n    );\\n}\\n\\nfunction solutionChecker(data) {\\n    const nodes = data.nodes;\\n    const edges = data.edges;\\n\\n    for (let i = 0; i < edges.length; i++) {\\n        const edgeA = edges[i];\\n        \\n        const startA = nodes[edgeA.start.nodeIndex];\\n        const endA = nodes[edgeA.end.nodeIndex];\\n\\n        for (let j = i + 1; j < edges.length; j++) {\\n            const edgeB = edges[j];\\n\\n            const startB = nodes[edgeB.start.nodeIndex];\\n            const endB = nodes[edgeB.end.nodeIndex];\\n\\n            if (\\n                isIntersecting(startA, endA, startB, endB) &&\\n                !hasCommonNode(edgeA, edgeB)\\n            ) {\\n                // console.log(startA.x,startA.y,  startB.x, startB.y, endA.x, endA.y, endB.x, endB.y)\\n                return false;\\n            }\\n        }\\n    }\\n\\n    // No intersections found, it's a plane graph\\n    return true;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 4,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Planar Graph\",\n        \"topic_name\": \"Graph\",\n        \"canvas_name\": \"Graph\"\n    }\n]"
						}
					]
				},
				{
					"name": "DeleteProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/110",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"110"
							]
						},
						"description": "### Delete Problem\n\nThis endpoint is used to delete a specific problem with the given ID.\n\n#### Request Parameters\n\n- No request body parameters are required for this request.\n    \n\n#### Response\n\n- Status: 200\n- Data: An empty array is returned upon successful deletion."
					},
					"response": [
						{
							"name": "DeleteProblem",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/110",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"110"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 11:21:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateTitle",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"This is Updated title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/title",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"title"
							]
						},
						"description": "This endpoint allows updating the title of a specific problem by sending an HTTP PUT request to the specified URL. The request should include a JSON payload with the new title in the raw request body. The response will have a status code of 200 and an empty array as the data.\n\n### Request Body\n\n- title (string, required): The new title for the problem.\n    \n\n### Response\n\n- Status: 200\n- Data: An empty array"
					},
					"response": [
						{
							"name": "UpdateTitle",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"This is Updated title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/title",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"title"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 15:57:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateSeries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"series_id\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/series",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"series"
							]
						},
						"description": "This HTTP PUT request is used to update a specific series within a problem via the '/api/problem/68/series' endpoint. The request should include a payload with the 'series_id' field to specify the series to be updated.\n\n### Request Body\n\n- series_id (string, required): The ID of the series to be updated.\n    \n\n### Response\n\n- Status: 200\n- Data: An array representing the updated series."
					},
					"response": [
						{
							"name": "UpdateSeries",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"series_id\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/series",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"series"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 16:00:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateSerial",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"serial_no\": \"10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/serial",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"serial"
							]
						},
						"description": "This API endpoint allows you to update the serial number for a specific problem with the given ID.\n\n### Request Body\n\n- `serial_no` (string, required): The new serial number to be updated.\n    \n\n### Response\n\n- Status: 200 OK\n- Data: An empty array is returned upon successful update."
					},
					"response": [
						{
							"name": "UpdateSerial",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serial_no\": \"10\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/serial",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"serial"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 16:01:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"canvas_id\": 2,\r\n        \"canvas_data\": {\r\n            \"numberOfMoves\": 0,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    0\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    2\r\n                ]\r\n            ]\r\n        },\r\n        \"params\": {\r\n            \"custom_disk\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"ordered\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"control_params\": {},\r\n        \"ui_params\": {\r\n            \"moves\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"n_disks\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"custom_disk\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"undo\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/canvas",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"canvas"
							]
						},
						"description": "This endpoint allows you to update the canvas for a specific problem using an HTTP PUT request. The request should be sent to [https://bitsunplugged-dev.onrender.com/api/problem/68/canvas](https://bitsunplugged-dev.onrender.com/api/problem/68/canvas).\n\n### Request\n\nThe request payload should be in raw format and include the following parameters:\n\n- canvas_id (numeric): The ID of the canvas.\n- canvas_data (object): An object containing data related to the canvas, such as the number of moves, disks, and pegs.\n- params (object): Additional parameters for customization, such as custom_disk and ordered.\n- control_params (object): Control parameters for the canvas.\n- ui_params (object): User interface parameters, including moves, n_disks, custom_disk, and undo.\n    \n\n### Response\n\nThe response to this request will have a status code of 200, and the body will be an empty array (\\[\\])."
					},
					"response": [
						{
							"name": "UpdateCanvas",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"canvas_id\": 2,\r\n        \"canvas_data\": {\r\n            \"numberOfMoves\": 0,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    0\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    2\r\n                ]\r\n            ]\r\n        },\r\n        \"params\": {\r\n            \"custom_disk\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"ordered\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"control_params\": {},\r\n        \"ui_params\": {\r\n            \"moves\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"n_disks\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"custom_disk\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"undo\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        }\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/canvas",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"canvas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 16:39:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateStatement",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statement\": \"This is updated statement\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/statement",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"statement"
							]
						},
						"description": "This endpoint allows you to update the statement for a specific problem using an HTTP PUT request. The request should be sent to [https://bitsunplugged-dev.onrender.com/api/problem/68/statement](https://bitsunplugged-dev.onrender.com/api/problem/68/statement).\n\n#### Request\n\n- The request body should be in raw format and include a JSON object with the \"statement\" key.\n    \n\n#### Response\n\n- The response will have a status code of 200 and an empty array as the data."
					},
					"response": [
						{
							"name": "UpdateStatement",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"statement\": \"This is updated statement\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/statement",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"statement"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 16:41:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateSollutionChecker",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"solution_checker\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\r\n    \"checker_type\": \"0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/solution_checker",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"solution_checker"
							]
						},
						"description": "This endpoint allows you to update the solution checker for a specific problem by sending an HTTP PUT request to the specified URL. The request should include the solution checker and the checker type in the raw request body.\n\n### Request Body\n\n- solution_checker (string): The solution checker for the problem. This can be a code or a canvas to match with.\n    \n- checker_type (string): The type of the checker(\"0\" : code , \"1\": canvas).\n    \n\n### Response\n\nThe endpoint returns a status code of 200 with an empty array as the response body."
					},
					"response": [
						{
							"name": "UpdateSollutionChecker",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"solution_checker\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\r\n    \"checker_type\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/solution_checker",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"solution_checker"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:08:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						},
						{
							"name": "UpdateSollutionChecker",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"solution_checker\": {\r\n        \"canvas_id\": 2,\r\n        \"canvas_data\": {\r\n            \"numberOfMoves\": 0,\r\n            \"numberOfDisks\": 3,\r\n            \"numberOfPegs\": 3,\r\n            \"pegs\": [\r\n                [\r\n                    0\r\n                ],\r\n                [\r\n                    1\r\n                ],\r\n                [\r\n                    2\r\n                ]\r\n            ]\r\n        },\r\n        \"params\": {\r\n            \"custom_disk\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"ordered\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        },\r\n        \"control_params\": {},\r\n        \"ui_params\": {\r\n            \"moves\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"n_disks\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"custom_disk\": {\r\n                \"value\": false,\r\n                \"type\": \"switch\"\r\n            },\r\n            \"undo\": {\r\n                \"value\": true,\r\n                \"type\": \"switch\"\r\n            }\r\n        }\r\n    },\r\n    \"checker_type\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/solution_checker",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"solution_checker"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:11:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "SubmitProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/submit",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"111",
								"submit"
							]
						},
						"description": "This API endpoint allows users to submit a problem . The HTTP POST request should be made to [https://bitsunplugged-dev.onrender.com/api/problem/:problem_id/submit](https://bitsunplugged-dev.onrender.com/api/problem/111/submit).\n\n### Request\n\nThe request body should be empty.\n\n### Response\n\n- Status: 200\n- Example: \\[\\]"
					},
					"response": [
						{
							"name": "SubmitProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/submit",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"111",
										"submit"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:14:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "PublishProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/publish",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"111",
								"publish"
							]
						},
						"description": "This endpoint is used to publish a specific problem . The request should be sent via an HTTP POST method to the specified URL.\n\n### Request\n\nThe request body for this endpoint has an undefined type and no specific payload was provided in the last call.\n\n### Response\n\n- Status: 200\n- The response is an empty array \"\\[\\]\"."
					},
					"response": [
						{
							"name": "PublishProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/publish",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"111",
										"publish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:16:11 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UnpublishProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/unpublish",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"111",
								"unpublish"
							]
						},
						"description": "This endpoint makes an HTTP POST request to [https://bitsunplugged-dev.onrender.com/api/problem/111/unpublish](https://bitsunplugged-dev.onrender.com/api/problem/111/unpublish) in order to unpublish a specific problem.\n\n### Request\n\nThe request does not contain a request body.\n\n### Response\n\n- Status: 200\n- Example: \\[\\]"
					},
					"response": [
						{
							"name": "UnpublishProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/111/unpublish",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"111",
										"unpublish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:18:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetUnsolved",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/unsolved/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"unsolved",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of unsolved problems. The response will include an array of objects, each representing an unsolved problem with various attributes such as problem_id, series_id, author_id, title, statement, canvas_data, is_live, last_updated, checker_code, params, ui_params, control_params, canvas_id, submit_state_id, serial_no, checker_type, checker_canvas, series_name, and topic_name."
					},
					"response": [
						{
							"name": "GetUnsolved",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/unsolved/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"unsolved",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "14666"
								},
								{
									"key": "ETag",
									"value": "W/\"394a-tfweFjKfNUWSoGWBJoydBe8Z5IA\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 20:13:50 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701439115392\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 7,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 98,\n        \"series_id\": 8,\n        \"author_id\": 1,\n        \"title\": \"Shorter Path\",\n        \"statement\": \"Select the edges that forms the shortest path from 0 to 6.\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704106904024\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 9,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"5\",\n                    \"weight\": \"8\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"5\",\n                    \"weight\": \"6\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 125.60000610351562,\n                    \"y\": 202.26666259765625\n                },\n                \"1\": {\n                    \"x\": 298.6000061035156,\n                    \"y\": 71.26666259765625\n                },\n                \"2\": {\n                    \"x\": 271.6000061035156,\n                    \"y\": 376.26666259765625\n                },\n                \"3\": {\n                    \"x\": 435.6000061035156,\n                    \"y\": 236.26666259765625\n                },\n                \"4\": {\n                    \"x\": 561.6000061035156,\n                    \"y\": 64.26666259765625\n                },\n                \"5\": {\n                    \"x\": 600.6000061035156,\n                    \"y\": 377.26666259765625\n                },\n                \"6\": {\n                    \"x\": 747.6000061035156,\n                    \"y\": 198.26666259765625\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"2\",\n                    \"weight\": \"1\"\n                },\n                {\n                    \"start\": \"2\",\n                    \"end\": \"3\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"4\",\n                    \"weight\": \"4\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"6\",\n                    \"weight\": \"2\"\n                }\n            ]\n        },\n        \"series_name\": \"Shortest Path\",\n        \"topic_name\": \"Graph\"\n    },\n    {\n        \"problem_id\": 99,\n        \"series_id\": 9,\n        \"author_id\": 1,\n        \"title\": \"Bipartition\",\n        \"statement\": \"Remove minimum possible edges, such that the graph is a bipartite graph.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1704109169798\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 10,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": null,\n        \"series_name\": \"Bipartite Graph\",\n        \"topic_name\": \"Graph\"\n    },\n    {\n        \"problem_id\": 108,\n        \"series_id\": 5,\n        \"author_id\": 1,\n        \"title\": \"3 Coloring\",\n        \"statement\": \"Draw the graph with only 3 colors. **No nodes should be left to default color.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"8\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"6\",\n                    \"end\": \"9\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"5\",\n                    \"end\": \"7\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"8\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"8\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"9\",\n                    \"end\": \"4\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"7\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"6\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"5\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"0\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"0\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 198.79998779296875,\n                    \"y\": 232,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 444.79998779296875,\n                    \"y\": 39,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 683.7999877929688,\n                    \"y\": 233,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 310.79998779296875,\n                    \"y\": 431,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 590.7999877929688,\n                    \"y\": 428,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"5\": {\n                    \"x\": 311.79998779296875,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"6\": {\n                    \"x\": 446.79998779296875,\n                    \"y\": 142,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"7\": {\n                    \"x\": 579.7999877929688,\n                    \"y\": 235,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"8\": {\n                    \"x\": 362.79998779296875,\n                    \"y\": 344,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                },\n                \"9\": {\n                    \"x\": 539.7999877929688,\n                    \"y\": 345,\n                    \"label\": \"\",\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704439693994\",\n        \"checker_code\": \"/**\\r\\n *\\r\\n * @param {Object} data - An object containing nodes and edges properties.\\r\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\r\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\r\\n * @returns {boolean} True if the solution is valid, otherwise false.\\r\\n */\\r\\nfunction solutionChecker(data) {\\r\\n  // const edges =  data.edges.map(edge => ({\\r\\n\\t// \\tstart: edge.start.nodeIndex,\\r\\n\\t// \\tend: edge.end.nodeIndex,\\r\\n\\t// \\tweight: edge.weight\\r\\n  // }));\\r\\n  \\r\\n\\r\\n  const allEdgesHaveDifferentColors = data.edges.every(\\r\\n    edge => data.nodes[edge.start].color !== data.nodes[edge.end].color && data.nodes[edge.end].color !== \\\"Default\\\"); \\r\\n\\r\\n  const uniqueColorsSet = new Set();\\r\\n  data.edges.forEach(edge => {\\r\\n    uniqueColorsSet.add(data.nodes[edge.start].color);\\r\\n    uniqueColorsSet.add(data.nodes[edge.end].color);\\r\\n  });\\r\\n\\r\\n  const numberOfUniqueColors = uniqueColorsSet.size;\\r\\n\\r\\n  return allEdgesHaveDifferentColors && numberOfUniqueColors == 3;\\r\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_color\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 12,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Graph Coloring\",\n        \"topic_name\": \"Graph\"\n    },\n    {\n        \"problem_id\": 74,\n        \"series_id\": 4,\n        \"author_id\": 1,\n        \"title\": \"Rearrange\",\n        \"statement\": \"Drag the nodes to make the graph a plane graph. In a plane graph there is no crossing edges.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1702049450177\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\n\\nfunction isIntersecting(a, b, c, d) {\\n    // Returns true if line segment (a, b) intersects with line segment (c, d)\\n    function ccw(a, b, c) {\\n        return (c.y - a.y) * (b.x - a.x) > (b.y - a.y) * (c.x - a.x);\\n    }\\n\\n    return (\\n        ccw(a, c, d) !== ccw(b, c, d) &&\\n        ccw(a, b, c) !== ccw(a, b, d)\\n    );\\n}\\n\\n\\nfunction hasCommonNode(edgeA, edgeB) {\\n    return (\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.start) === JSON.stringify(edgeB.end) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.start) ||\\n        JSON.stringify(edgeA.end) === JSON.stringify(edgeB.end)\\n    );\\n}\\n\\nfunction solutionChecker(data) {\\n    const nodes = data.nodes;\\n    const edges = data.edges;\\n\\n    for (let i = 0; i < edges.length; i++) {\\n        const edgeA = edges[i];\\n        \\n        const startA = nodes[edgeA.start.nodeIndex];\\n        const endA = nodes[edgeA.end.nodeIndex];\\n\\n        for (let j = i + 1; j < edges.length; j++) {\\n            const edgeB = edges[j];\\n\\n            const startB = nodes[edgeB.start.nodeIndex];\\n            const endB = nodes[edgeB.end.nodeIndex];\\n\\n            if (\\n                isIntersecting(startA, endA, startB, endB) &&\\n                !hasCommonNode(edgeA, edgeB)\\n            ) {\\n                // console.log(startA.x,startA.y,  startB.x, startB.y, endA.x, endA.y, endB.x, endB.y)\\n                return false;\\n            }\\n        }\\n    }\\n\\n    // No intersections found, it's a plane graph\\n    return true;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 4,\n        \"serial_no\": 1,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Planar Graph\",\n        \"topic_name\": \"Graph\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetUnsolvedAttempted",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/unsolved/attempted",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"unsolved",
								"attempted"
							]
						},
						"description": "### Get Unsolved Attempted Problems\n\nThis endpoint retrieves a list of unsolved problems that have been attempted.\n\n#### Request\n\n- Method: GET\n- URL: `https://bitsunplugged-dev.onrender.com/api/problem/unsolved/attempted`\n- Payload: null\n    \n\n#### Response\n\n- Status: 200\n    \n- The response contains an array of problem objects with their respective attributes."
					},
					"response": [
						{
							"name": "GetUnsolvedAttempted",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/unsolved/attempted",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"unsolved",
										"attempted"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "3124"
								},
								{
									"key": "ETag",
									"value": "W/\"c34-aX9vf39Od7g3nes9Ub1b0M9LnXo\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 20:15:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetRecomendation",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/recommendation/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"recommendation",
								""
							]
						},
						"description": "This HTTP GET request is used to fetch a list of recommended problem details. The response will include an array of objects, each containing information about a recommended problem. The details include problem ID, series ID, author ID, title, statement, canvas data, live status, last updated timestamp, checker code, parameters, UI parameters, control parameters, canvas ID, submit state ID, serial number, checker type, checker canvas, series name, and topic name."
					},
					"response": [
						{
							"name": "GetRecomendation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/recommendation/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"recommendation",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "3124"
								},
								{
									"key": "ETag",
									"value": "W/\"c34-aX9vf39Od7g3nes9Ub1b0M9LnXo\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 20:17:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        },\n        \"series_name\": \"Tower Of Hanoi\",\n        \"topic_name\": \"Recursion\"\n    }\n]"
						}
					]
				},
				{
					"name": "BookmarkProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAkeUdHN1RkMmh1VFlPOFlVbGJSUUtiLmxKNmFOQ1l1aGtNaXZGL3lBeHlndG5GODFNb0hjVEsiLCJ0eXBlIjoiMiIsImlhdCI6MTcwNDU1MDg5MCwiZXhwIjoxNzA0NjM3MjkwfQ.4D5F8EzXu5hakI5DBHATRLUdvXZTS2dl6nLg-5C71w8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/bookmark",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"68",
								"bookmark"
							]
						},
						"description": "### Add Bookmark to Problem\n\nThis endpoint allows the user to add a bookmark to a specific problem.\n\n**HTTP Request**  \n`POST https://bitsunplugged-dev.onrender.com/api/problem/68/bookmark`\n\n**Response**\n\n- Status: 200\n- Body: null"
					},
					"response": [
						{
							"name": "BookmarkProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/68/bookmark",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"68",
										"bookmark"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 19:05:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "UpdateAllRatings",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAkeUdHN1RkMmh1VFlPOFlVbGJSUUtiLmxKNmFOQ1l1aGtNaXZGL3lBeHlndG5GODFNb0hjVEsiLCJ0eXBlIjoiMiIsImlhdCI6MTcwNDU1MDg5MCwiZXhwIjoxNzA0NjM3MjkwfQ.4D5F8EzXu5hakI5DBHATRLUdvXZTS2dl6nLg-5C71w8",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/problem/rating",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"problem",
								"rating"
							]
						}
					},
					"response": [
						{
							"name": "UpdateAllRatings",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/problem/rating",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"problem",
										"rating"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 22:37:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Canvas",
			"item": [
				{
					"name": "AddCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"NewCanvas\",\r\n    \"classname\": \"AddedCanvas\",\r\n    \"info\": null,\r\n    \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\r\n    \"params\": {},\r\n    \"control_params\": {},\r\n    \"ui_params\": {},\r\n    \"template\": \"function solutionChecker(data) {}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								""
							]
						},
						"description": "The `POST /api/canvas/` endpoint allows you to create a new canvas. The request should include a JSON payload with parameters such as `name`, `classname`, `info`, `logo`, `params`, `control_params`, `ui_params`, and `template`. The response will contain the newly created `canvas_id`.\n\n### Request Body\n\n- `name` (string): The name of the canvas.\n- `classname` (string): The class name of the canvas.\n- `info` (string): Additional information about the canvas.\n- `logo` (string): The logo of the canvas.\n- `params` (object): Parameters for the canvas.\n- `control_params` (object): Control parameters for the canvas.\n- `ui_params` (object): UI parameters for the canvas.\n- `template` (string): The template for the canvas.\n    \n\n### Response\n\nUpon successful creation, the response will include the `canvas_id` of the newly created canvas.\n\n#### Example\n\nRequest:\n\n``` json\n{\n    \"name\": \"Example Canvas\",\n    \"classname\": \"CanvasClass\",\n    \"info\": \"Additional information\",\n    \"logo\": \"logo.png\",\n    \"params\": {},\n    \"control_params\": {},\n    \"ui_params\": {},\n    \"template\": \"template.html\"\n}\n\n ```\n\nResponse:\n\n``` json\n[\n    {\n        \"canvas_id\": 8\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "AddCanvas",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"NewCanvas\",\r\n    \"classname\": \"AddedCanvas\",\r\n    \"info\": null,\r\n    \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\r\n    \"params\": {},\r\n    \"control_params\": {},\r\n    \"ui_params\": {},\r\n    \"template\": \"function solutionChecker(data) {}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "ETag",
									"value": "W/\"11-RwNJcllym+rXiR/DeqWgr8lmato\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:21:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"canvas_id\": 8\n    }\n]"
						}
					]
				},
				{
					"name": "GetCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/2",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								"2"
							]
						},
						"description": "This API endpoint makes an HTTP GET request to retrieve information about a specific canvas .\n\n### Response\n\nThe response contains details about the canvas, including its name, class name, information, logo, parameters, control parameters, UI parameters, and a template for solution checking."
					},
					"response": [
						{
							"name": "GetCanvas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/2",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1138"
								},
								{
									"key": "ETag",
									"value": "W/\"472-AjITmAVgQ3Yz7Mh++vlNaB8v7Gs\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:29:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"canvas_id\": 2,\n        \"name\": \"Tower of Hanoi\",\n        \"classname\": \"TowerOfHanoi\",\n        \"info\": \"Drag and drop top most stacks from one peg to another.\\nYou can increase the number of disks direcly from the top left spinner.\\nOr you can add disks of different sizes from the bottom spinner. Choose your disk of your preffered size and drag and drop in the pegs.\\nAt most 10 disks can be in each peg.\\nYou cannot put larger disks over smaller ones.\",\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\n    }\n]"
						}
					]
				},
				{
					"name": "UpdateCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"canvas\":{\r\n        \"name\": \"Updated\",\r\n        \"classname\": \"AddedCanvas\",\r\n        \"info\": null,\r\n        \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\r\n        \"params\": {},\r\n        \"control_params\": {},\r\n        \"ui_params\": {},\r\n        \"template\": \"function solutionChecker(data) {}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/6",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								"6"
							]
						},
						"description": "This endpoint allows you to update the canvas with the specified ID. The request should be sent as an HTTP PUT to [https://bitsunplugged-dev.onrender.com/api/canvas/6](https://bitsunplugged-dev.onrender.com/api/canvas/6)\n\n### Request\n\nThere will be the updated info about the canvas as payload in the raw request body.\n\n### Response\n\n- Status: 200\n- Data: \\[\\]"
					},
					"response": [
						{
							"name": "UpdateCanvas",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"canvas\":{\r\n        \"name\": \"Updated\",\r\n        \"classname\": \"AddedCanvas\",\r\n        \"info\": null,\r\n        \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\r\n        \"params\": {},\r\n        \"control_params\": {},\r\n        \"ui_params\": {},\r\n        \"template\": \"function solutionChecker(data) {}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/6",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										"6"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:33:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "DeleteCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/8",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								"8"
							]
						},
						"description": "This endpoint sends an HTTP DELETE request to [https://bitsunplugged-dev.onrender.com/api/canvas/8](https://bitsunplugged-dev.onrender.com/api/canvas/8) to delete a specific canvas.\n\n### Request\n\nThe request does not include a request body.\n\n### Response\n\nThe endpoint returns a status code of 200 with an empty array as the response body."
					},
					"response": [
						{
							"name": "DeleteCanvas",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/8",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										"8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:36:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetAllCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								""
							]
						},
						"description": "This endpoint retrieves a list of canvas items.\n\n### Request\n\n- Payload: null\n    \n\n### Response\n\n- Status: 200\n- Body : The response will provide detailed information about each canvas, including its unique identifier, canvas data, UI parameters, control parameters."
					},
					"response": [
						{
							"name": "GetAllCanvas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "3127"
								},
								{
									"key": "ETag",
									"value": "W/\"c37-+Z6woB7l0gBHYvKhWzxudx64tnA\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 16:30:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"canvas_id\": 2,\n        \"name\": \"Tower of Hanoi\",\n        \"classname\": \"TowerOfHanoi\",\n        \"info\": \"Drag and drop top most stacks from one peg to another.\\nYou can increase the number of disks direcly from the top left spinner.\\nOr you can add disks of different sizes from the bottom spinner. Choose your disk of your preffered size and drag and drop in the pegs.\\nAt most 10 disks can be in each peg.\\nYou cannot put larger disks over smaller ones.\",\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\n    },\n    {\n        \"canvas_id\": 3,\n        \"name\": \"Red Black Tree\",\n        \"classname\": \"RbTree\",\n        \"info\": \"Insert or Delete nodes\",\n        \"logo\": \"https://ds055uzetaobb.cloudfront.net/brioche/uploads/DtAKvHZ65j-rb-1.png?width=1200\",\n        \"params\": {},\n        \"control_params\": {},\n        \"ui_params\": {},\n        \"template\": \"function solutionChecker(data) {}\"\n    },\n    {\n        \"canvas_id\": 5,\n        \"name\": \"Array\",\n        \"classname\": \"ArrayCanvas\",\n        \"info\": null,\n        \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\n        \"params\": {},\n        \"control_params\": {},\n        \"ui_params\": {},\n        \"template\": \"function solutionChecker(data) {}\"\n    },\n    {\n        \"canvas_id\": 1,\n        \"name\": \"Graph\",\n        \"classname\": \"GraphComponent\",\n        \"info\": \"Click anywhere in the canvas to create nodes. Click on two nodes to create an edge between them. You can also drag nodes.\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_color\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetLiveCanvas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/live",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"canvas",
								"live"
							]
						},
						"description": "This endpoint retrieves a list of live canvas items.\n\n### Request\n\n- Payload: null\n    \n\n### Response\n\n- Status: 200\n- Body : The response will provide detailed information about each canvas, including its unique identifier, canvas data, UI parameters, control parameters."
					},
					"response": [
						{
							"name": "GetLiveCanvas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/canvas/live",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"canvas",
										"live"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "3127"
								},
								{
									"key": "ETag",
									"value": "W/\"c37-+Z6woB7l0gBHYvKhWzxudx64tnA\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 20:33:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"canvas_id\": 2,\n        \"name\": \"Tower of Hanoi\",\n        \"classname\": \"TowerOfHanoi\",\n        \"info\": \"Drag and drop top most stacks from one peg to another.\\nYou can increase the number of disks direcly from the top left spinner.\\nOr you can add disks of different sizes from the bottom spinner. Choose your disk of your preffered size and drag and drop in the pegs.\\nAt most 10 disks can be in each peg.\\nYou cannot put larger disks over smaller ones.\",\n        \"logo\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbAENY_duGomNEm95iTrLS6t6phHPiZ0pSAbgIwhXTOYCcIvfcj1z6QiSeM_PQblTkfoU&usqp=CAU\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return false;\\n}\\n\"\n    },\n    {\n        \"canvas_id\": 3,\n        \"name\": \"Red Black Tree\",\n        \"classname\": \"RbTree\",\n        \"info\": \"Insert or Delete nodes\",\n        \"logo\": \"https://ds055uzetaobb.cloudfront.net/brioche/uploads/DtAKvHZ65j-rb-1.png?width=1200\",\n        \"params\": {},\n        \"control_params\": {},\n        \"ui_params\": {},\n        \"template\": \"function solutionChecker(data) {}\"\n    },\n    {\n        \"canvas_id\": 5,\n        \"name\": \"Array\",\n        \"classname\": \"ArrayCanvas\",\n        \"info\": null,\n        \"logo\": \"https://static.vecteezy.com/system/resources/previews/002/258/426/non_2x/2d-array-outline-icon-item-from-set-dedicated-to-big-data-and-machine-learning-vector.jpg\",\n        \"params\": {},\n        \"control_params\": {},\n        \"ui_params\": {},\n        \"template\": \"function solutionChecker(data) {}\"\n    },\n    {\n        \"canvas_id\": 1,\n        \"name\": \"Graph\",\n        \"classname\": \"GraphComponent\",\n        \"info\": \"Click anywhere in the canvas to create nodes. Click on two nodes to create an edge between them. You can also drag nodes.\",\n        \"logo\": \"https://cdn0.iconfinder.com/data/icons/graph-4/100/graph1-512.png\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_color\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"template\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "GetProfile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU0NjM1MywiZXhwIjoxNzA0NjMyNzUzfQ.O-sG82X-Y_qcHzfLE7MMgcmw_umXozC0QEX7M4OBnEY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve the profile information.\n\n### Request\n\nThe request does not require any parameters or request body.\n\n### Response\n\nThe response returns a status code of 200 along with an array of profile information. The profile information includes user_id, fullname, username, image, date of birth (dob), and is_public status."
					},
					"response": [
						{
							"name": "GetProfile",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "305"
								},
								{
									"key": "ETag",
									"value": "W/\"131-qTqLR1uU2jhKXrwBhtvqY5hsgxQ\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:51:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"user_id\": 1,\n        \"fullname\": \"Mahir Labib Dihan\",\n        \"username\": \"mahirlabibdihan\",\n        \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\n        \"dob\": null,\n        \"is_public\": null\n    }\n]"
						}
					]
				},
				{
					"name": "SetProfile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullname\": \"Tanvir Saad\",\r\n    \"username\": \"tanvirsaad\",\r\n    \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\r\n    \"dob\": null,\r\n    \"is_public\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile"
							]
						},
						"description": "This endpoint allows you to create a new profile by sending a POST request to the specified URL.\n\n### Request\n\nThe request should include a JSON payload in the raw request body, containing the profile details such as fullname, username, image, date of birth (dob), and a flag indicating if the profile is public (is_public).\n\n### Response\n\nUpon successful execution, the API returns a status code of 200 with an empty array as the response body."
					},
					"response": [
						{
							"name": "SetProfile",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullname\": \"Tanvir Saad\",\r\n    \"username\": \"tanvirsaad\",\r\n    \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\r\n    \"dob\": null,\r\n    \"is_public\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:54:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateProfile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0Mzk2NTczLCJleHAiOjE3MDQ0ODI5NzN9._jCNcJUYf4yo9Z7sXbIZ5YYLy4ryYmHBVvOOgPmXtb0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 1,\r\n    \"fullname\": \"Mahir Labib Dihan Dihan\",\r\n    \"username\": \"mahirlabibdihan\",\r\n    \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\r\n    \"dob\": null,\r\n    \"is_public\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile"
							]
						},
						"description": "This endpoint allows you to update a user's profile. The HTTP PUT request should be made to [https://bitsunplugged-dev.onrender.com/api/profile](https://bitsunplugged-dev.onrender.com/api/profile).\n\n### Request Body\n\n- `user_id` (number) - The ID of the user.\n- `fullname` (string) - The full name of the user.\n- `username` (string) - The username of the user.\n- `image` (string) - The URL of the user's profile image.\n- `dob` (date) - The date of birth of the user.\n- `is_public` (boolean) - Indicates whether the user's profile is public or not.\n    \n\n### Response\n\nThe response for this request will have a status code of 200, indicating a successful update. The response body will be an empty array \\[\\]."
					},
					"response": [
						{
							"name": "UpdateProfile",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": 1,\r\n    \"fullname\": \"Mahir Labib Dihan Dihan\",\r\n    \"username\": \"mahirlabibdihan\",\r\n    \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\r\n    \"dob\": null,\r\n    \"is_public\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 17:56:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UploadProfilePicture",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAkeUdHN1RkMmh1VFlPOFlVbGJSUUtiLmxKNmFOQ1l1aGtNaXZGL3lBeHlndG5GODFNb0hjVEsiLCJ0eXBlIjoiMiIsImlhdCI6MTcwNDU1MDg5MCwiZXhwIjoxNzA0NjM3MjkwfQ.4D5F8EzXu5hakI5DBHATRLUdvXZTS2dl6nLg-5C71w8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"path\": \"https://scontent.fdac27-2.fna.fbcdn.net/v/t39.30808-6/391661479_1973578386350779_7820495945977597120_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=efb6e6&_nc_eui2=AeE4S_fvSuvjDSdSF0KrV9Xlot3RvZBXDMai3dG9kFcMxn-KTS5KFKw66nnhS0Jlbql64yT2q8eI1mE1RlG7asBN&_nc_ohc=x25yE-WLSa8AX_PsqQP&_nc_ht=scontent.fdac27-2.fna&oh=00_AfBMndXKx2J-5baU3aPlUDyUHhLSN4BnEcaiu-yMaAJA5Q&oe=659F87B7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile/upload/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile",
								"upload",
								""
							]
						},
						"description": "This API endpoint allows users to upload a profile. The HTTP POST request should be sent to [https://bitsunplugged-dev.onrender.com/api/profile/upload/](https://bitsunplugged-dev.onrender.com/api/profile/upload/). The request should have a raw body with a JSON payload containing the \"path\" parameter specifying the path of the profile to be uploaded.\n\nUpon successful execution, the API returns a status code of 200 with a null response."
					},
					"response": [
						{
							"name": "UploadProfilePicture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"https://scontent.fdac27-2.fna.fbcdn.net/v/t39.30808-6/391661479_1973578386350779_7820495945977597120_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=efb6e6&_nc_eui2=AeE4S_fvSuvjDSdSF0KrV9Xlot3RvZBXDMai3dG9kFcMxn-KTS5KFKw66nnhS0Jlbql64yT2q8eI1mE1RlG7asBN&_nc_ohc=x25yE-WLSa8AX_PsqQP&_nc_ht=scontent.fdac27-2.fna&oh=00_AfBMndXKx2J-5baU3aPlUDyUHhLSN4BnEcaiu-yMaAJA5Q&oe=659F87B7\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile/upload/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile",
										"upload",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 19:09:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "GetAllUsers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU3MjUxOSwiZXhwIjoxNzA0NjU4OTE5fQ.uZW4WdygTPGqV9LKEK5abbhjTboj9zYCZf9A7mZAXpo",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile/users",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile",
								"users"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of user profiles. The request does not require any payload in the request body.\n\nThe response will include an array of user profiles, where each profile object contains the user's ID, full name, username, profile image URL, date of birth, and a flag indicating whether the profile is public or not.\n\nExample response:\n\n``` json\n[\n    {\n        \"user_id\": 16,\n        \"fullname\": \"Mahir Labib Dihan\",\n        \"username\": \"dihan\",\n        \"image\": \"https://preview.redd.it/tried-to-make-the-discord-clyde-logo-more-similar-to-the-v0-g2bha52fh9v91.png?auto=webp&s=f74e8a7068998d18b22fa3bbb3e62ee9975204d3\",\n        \"dob\": null,\n        \"is_public\": null\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile/users",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "259"
								},
								{
									"key": "ETag",
									"value": "W/\"103-FMp31flMnnvCp+R1qFisNRDDZvs\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 21:00:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"user_id\": 16,\n        \"fullname\": \"Mahir Labib Dihan\",\n        \"username\": \"dihan\",\n        \"image\": \"https://preview.redd.it/tried-to-make-the-discord-clyde-logo-more-similar-to-the-v0-g2bha52fh9v91.png?auto=webp&s=f74e8a7068998d18b22fa3bbb3e62ee9975204d3\",\n        \"dob\": null,\n        \"is_public\": null\n    }\n]"
						}
					]
				},
				{
					"name": "GetAllSetters",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTc0ODQ5LCJleHAiOjE3MDQ2NjEyNDl9.AHPUCznQVAnOz-G8BwvbEaGkOGGTmlDm0j5xZixxWXI",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/profile/setters",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"profile",
								"setters"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of problem setters. The request does not require a request body. The response will include an array of objects, where each object represents a profile setter and includes their user ID, full name, username, image URL, date of birth, and a flag indicating whether the profile is public or not."
					},
					"response": [
						{
							"name": "GetAllSetters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/profile/setters",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"profile",
										"setters"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "305"
								},
								{
									"key": "ETag",
									"value": "W/\"131-qTqLR1uU2jhKXrwBhtvqY5hsgxQ\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 21:01:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"user_id\": 1,\n        \"fullname\": \"Mahir Labib Dihan\",\n        \"username\": \"mahirlabibdihan\",\n        \"image\": \"https://i.guim.co.uk/img/media/ef8492feb3715ed4de705727d9f513c168a8b196/37_0_1125_675/master/1125.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=d456a2af571d980d8b2985472c262b31\",\n        \"dob\": null,\n        \"is_public\": null\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Submission",
			"item": [
				{
					"name": "GetSubmissionByProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"submission",
								"30"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve the users submission data for a specific problem ID.\n\n### Endpoint\n\n`GET https://bitsunplugged-dev.onrender.com/api/submission/:problem_id`\n\n### Request Body\n\nThe request does not contain a request body.\n\n### Response\n\nThe response contains submission data, where the object includes the following fields:\n\n- `submission_id` (number): The ID of the submission\n- `problem_id` (number): The ID of the problem\n- `user_id` (number): The ID of the user\n- `verdict` (string): The verdict of the submission\n- `time_stamp` (string): The timestamp of the submission\n- `json_data` (object): Additional JSON data related to the canvas."
					},
					"response": [
						{
							"name": "GetSubmissionByProblem",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"submission",
										"30"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "ETag",
									"value": "W/\"2f5-ieuBg2ryysbmBbAOC/7GyVKL2mg\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 18:20:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"submission_id\": 60,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704453816686\",\n        \"json_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "GetSubmissionOfAllUsers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30/allUsers",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"submission",
								"30",
								"allUsers"
							]
						},
						"description": "# Get All Users Submission Data\n\nThis endpoint retrieves the submission data for all users related to a specific problem ID.\n\n### Endpoint\n\n`GET https://bitsunplugged-dev.onrender.com/api/submission/:problem_id/allUsers`\n\n### Request Body\n\nThe request does not contain a request body.\n\n## Response\n\n### Status: 200\n\nThe response contains an array of submission data, where each object includes the following fields:\n\n- `submission_id` (number): The ID of the submission\n- `problem_id` (number): The ID of the problem\n- `user_id` (number): The ID of the user\n- `verdict` (string): The verdict of the submission\n- `time_stamp` (string): The timestamp of the submission\n- `json_data` (object): Additional JSON data related to the canvas."
					},
					"response": [
						{
							"name": "GetSubmissionOfAllUsers",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30/allUsers",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"submission",
										"30",
										"allUsers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "ETag",
									"value": "W/\"2f5-ieuBg2ryysbmBbAOC/7GyVKL2mg\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 18:26:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"submission_id\": 60,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704453816686\",\n        \"json_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "SubmitSolution",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU2OTMyMCwiZXhwIjoxNzA0NjU1NzIwfQ.330dRbOZbjpAtsR4MzLMWzwAfLZ_mvsVs9hLo1gtQcY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"verdict\": \"Accepted\",\r\n    \"time_stamp\": \"1704453816686\",\r\n    \"json_data\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30/saveSubmit",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"submission",
								"30",
								"saveSubmit"
							]
						},
						"description": "## Save Submission\n\nThis endpoint allows the user to save a submission with the provided data.\n\n### Request Body\n\n- user_id (integer): The ID of the user submitting the data.\n- verdict (string): The verdict of the submission.\n- time_stamp (string): The timestamp of the submission.\n- json_data (object): The JSON data containing canvas information.\n    \n\n### Response\n\n- submission_id (integer): The ID of the saved submission."
					},
					"response": [
						{
							"name": "SubmitSolution",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"user_id\": 16,\r\n        \"verdict\": \"Accepted\",\r\n        \"time_stamp\": \"1704453816686\",\r\n        \"json_data\": {}\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/submission/30/saveSubmit",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"submission",
										"30",
										"saveSubmit"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "ETag",
									"value": "W/\"16-i5V+IC9DzoHrkqzGEX0zmeQpst4\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 18:54:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"submission_id\": 63\n    }\n]"
						}
					]
				},
				{
					"name": "GetAllSubmissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/submission/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"submission",
								""
							]
						},
						"description": "### Get Submission Details\n\nThis endpoint retrieves the details of a submission.\n\n**Request**:\n\n- Method: GET\n- URL: `https://bitsunplugged-dev.onrender.com/api/submission/`\n    \n\n**Response**:\n\n- Status: 200\n    \n- The response contains an array of submission data, where each object includes the following fields:\n    \n    - `submission_id` (number): The ID of the submission\n        \n    - `problem_id` (number): The ID of the problem\n        \n    - `user_id` (number): The ID of the user\n        \n    - `verdict` (string): The verdict of the submission\n        \n    - `time_stamp` (string): The timestamp of the submission\n        \n    - `json_data` (object): Additional JSON data related to the canvas."
					},
					"response": [
						{
							"name": "GetAllSubmissions",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/submission/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"submission",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1108"
								},
								{
									"key": "ETag",
									"value": "W/\"454-UtUnoHtiNvWmo1gzIGCUGs5hYCE\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 18:54:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"submission_id\": 60,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704453816686\",\n        \"json_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    },\n    {\n        \"submission_id\": 61,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704479537366\",\n        \"json_data\": null\n    },\n    {\n        \"submission_id\": 62,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704480817203\",\n        \"json_data\": null\n    },\n    {\n        \"submission_id\": 63,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704480855119\",\n        \"json_data\": null\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "User Activity",
			"item": [
				{
					"name": "SuccessfulAttempt",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/userActivity/30/successAttempt",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"userActivity",
								"30",
								"successAttempt"
							]
						}
					},
					"response": [
						{
							"name": "SuccessfulAttempt",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/userActivity/30/successAttempt",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"userActivity",
										"30",
										"successAttempt"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 19:00:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "FailedAttempt",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/userActivity/30/failedAttempt",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"userActivity",
								"30",
								"failedAttempt"
							]
						}
					},
					"response": [
						{
							"name": "FailedAttempt",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/userActivity/30/failedAttempt",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"userActivity",
										"30",
										"failedAttempt"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Fri, 05 Jan 2024 19:02:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				}
			]
		},
		{
			"name": "Contest",
			"item": [
				{
					"name": "GetAllContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ4NDM2LCJleHAiOjE3MDQ2MzQ4MzZ9.lBDg_6IUyDK-qAQJ3o_H6FSYu-IcZ7Z5gJ_C0Og-8YY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								""
							]
						},
						"description": "This HTTP GET request fetches a list of contests available in the API. The request does not require any payload in the request body.\n\n### Response\n\nThe response will have a status code of 200, indicating a successful request. The body of the response will be an array of objects, with each object representing a contest. Each contest object contains the following attributes:\n\n- `contest_id`: The unique identifier for the contest.\n- `title`: The title of the contest.\n- `description`: A brief description of the contest.\n- `start_date`: The start date of the contest.\n- `end_date`: The end date of the contest.\n- `status`: The status of the contest (e.g., \"edit\", \"upcoming\").\n- `last_updated`: The timestamp of the last update to the contest."
					},
					"response": [
						{
							"name": "GetAllContest",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "649"
								},
								{
									"key": "ETag",
									"value": "W/\"289-P3a//jd3vPwoyx2BEI9mexv3Z/w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:42:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_id\": 2,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"upcoming\",\n        \"last_updated\": \"1704545080049\",\n        \"setters\": \"1, 3, 3, 2, 5\",\n        \"roles\": \"owner, collaborator, collaborator, collaborator, collaborator\"\n    },\n    {\n        \"contest_id\": 3,\n        \"title\": \"New Contest\",\n        \"description\": \"This is the new description.\",\n        \"start_date\": \"1704548452320\",\n        \"end_date\": \"1704548534286\",\n        \"status\": \"completed\",\n        \"last_updated\": \"1704548534286\",\n        \"setters\": \"1, 5, 3\",\n        \"roles\": \"owner, collaborator, collaborator\"\n    },\n    {\n        \"contest_id\": 1,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"edit\",\n        \"last_updated\": \"1704544237821\",\n        \"setters\": \"1\",\n        \"roles\": \"owner\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetPublishedContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ0MTc4LCJleHAiOjE3MDQ2MzA1Nzh9.t4zoDVa3g72RCW6S69tOZ92G_C9HvuJWvOpj-egIUN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/published/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"published",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of published contests. The request should be sent to [https://bitsunplugged-dev.onrender.com/api/contest/published/](https://bitsunplugged-dev.onrender.com/api/contest/published/).\n\nThe response will have a status code of 200, indicating a successful request. The response body will contain an array of objects, with each object representing a published contest. Each contest object will include the contest ID, title, description, start date, end date, status, and last updated timestamp."
					},
					"response": [
						{
							"name": "GetPublishedContest",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/published/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"published",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "170"
								},
								{
									"key": "ETag",
									"value": "W/\"aa-CQK20Rtpg4z5WXxXevTg03ot+pM\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:44:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_id\": 3,\n        \"title\": \"New Contest\",\n        \"description\": \"This is the new description.\",\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"upcoming\",\n        \"last_updated\": \"1704537626183\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetMyContests",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ0MTc4LCJleHAiOjE3MDQ2MzA1Nzh9.t4zoDVa3g72RCW6S69tOZ92G_C9HvuJWvOpj-egIUN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/all/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"all",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve all contests from the API. The request does not require a request body. The response will have a status code of 200 and will include an array of contest objects. Each contest object contains the contest ID, title, description, start date, end date, status, last updated timestamp, and role."
					},
					"response": [
						{
							"name": "GetMyContests",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/all/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"all",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "672"
								},
								{
									"key": "ETag",
									"value": "W/\"2a0-taZfWDEvdrk4FjS0mXsWXwBnvhA\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:53:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_id\": 2,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"upcoming\",\n        \"last_updated\": \"1704545080049\",\n        \"role\": \"collaborator\"\n    },\n    {\n        \"contest_id\": 2,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"upcoming\",\n        \"last_updated\": \"1704545080049\",\n        \"role\": \"collaborator\"\n    },\n    {\n        \"contest_id\": 5,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"edit\",\n        \"last_updated\": \"1704548852207\",\n        \"role\": \"owner\"\n    },\n    {\n        \"contest_id\": 3,\n        \"title\": \"New Contest\",\n        \"description\": \"This is the new description.\",\n        \"start_date\": \"1704548452320\",\n        \"end_date\": \"1704548534286\",\n        \"status\": \"completed\",\n        \"last_updated\": \"1704549075781\",\n        \"role\": \"collaborator\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetOwnedContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ0MTc4LCJleHAiOjE3MDQ2MzA1Nzh9.t4zoDVa3g72RCW6S69tOZ92G_C9HvuJWvOpj-egIUN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/owned/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"owned",
								""
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of contests owned by the user. The request does not include a request body. The response will have a status code of 200, and it will contain an array of contest objects. Each contest object includes the contest ID, title, description, start date, end date, status, last updated timestamp, and role information.\n"
					},
					"response": [
						{
							"name": "GetOwnedContest",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/owned/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"owned",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "146"
								},
								{
									"key": "ETag",
									"value": "W/\"92-NB98GLDSsTQH+YCeyOpSdizJ3Ek\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:53:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_id\": 5,\n        \"title\": null,\n        \"description\": null,\n        \"start_date\": null,\n        \"end_date\": null,\n        \"status\": \"edit\",\n        \"last_updated\": \"1704548852207\",\n        \"role\": \"owner\"\n    }\n]"
						}
					]
				},
				{
					"name": "AddContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/addContest/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"addContest",
								""
							]
						},
						"description": "\nThis endpoint allows you to add a new contest. The request should be sent via an HTTP POST to the URL https://bitsunplugged-dev.onrender.com/api/contest/addContest/. The request body should contain the necessary data to create the contest. Upon successful execution, the response will have a status code of 200 and will include the ID of the newly created contest in the format [{\"contest_id\": 0}].\n"
					},
					"response": [
						{
							"name": "AddContest",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/addContest/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"addContest",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "18"
								},
								{
									"key": "ETag",
									"value": "W/\"12-gMaXbZ/GWJD2eJf7TiQaY1fggGI\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 09:49:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_id\": 3\n    }\n]"
						}
					]
				},
				{
					"name": "UpdateTitle",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"New Contest\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/updateTitle",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"updateTitle"
							]
						},
						"description": "This endpoint allows you to update the title of a contest using an HTTP PUT request. The request should be sent to [https://bitsunplugged-dev.onrender.com/api/contest/3/updateTitle](https://bitsunplugged-dev.onrender.com/api/contest/3/updateTitle) with a JSON payload in the raw request body.\n\n### Request Body\n\nThe payload should include the new title for the contest.\n\n### Response\n\nUpon a successful update, the endpoint returns a status code of 200 with an empty array as the response body."
					},
					"response": [
						{
							"name": "UpdateTitle",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\" : \"New Contest\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/updateTitle",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"updateTitle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:02:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "UpdateDescription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"This is the new description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/updateDescription/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"updateDescription",
								""
							]
						},
						"description": "This endpoint is used to update the description of a contest with the ID 3. The HTTP PUT request should be made to [https://bitsunplugged-dev.onrender.com/api/contest/3/updateDescription/](https://bitsunplugged-dev.onrender.com/api/contest/3/updateDescription/). The request body should be in raw format and include a JSON object with the key \"description\" and the new description value.\n\n### Request Body\n\n- description (string, required): The new description for the contest.\n    \n\n### Response\n\n- Status: 200\n- Data: An empty array is returned upon successful execution."
					},
					"response": [
						{
							"name": "UpdateDescription",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"This is the new description.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/updateDescription/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"updateDescription",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:09:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "AddCollaborator",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"collaborator_id\": \"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/addCollaborator/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"addCollaborator",
								""
							]
						},
						"description": "This endpoint allows you to add a collaborator to a specific contest.\n\n### Request Body\n\n- `collaborator_id` (string, required): The ID of the collaborator to be added.\n    \n\n### Response\n\n- Status: 200\n- Body: An empty array."
					},
					"response": [
						{
							"name": "AddCollaborator",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"collaborator_id\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/addCollaborator/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"addCollaborator",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:11:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "ShowAllCollaborators",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/showAllCollaborators/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"showAllCollaborators",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of all collaborators for a specific contest.\n\n### Request\n\nThe request does not require any payload.\n\n- HTTP Method: GET\n- URL: [https://bitsunplugged-dev.onrender.com/api/contest/:contest_id/showAllCollaborators/](https://bitsunplugged-dev.onrender.com/api/contest/3/showAllCollaborators/)\n    \n\n### Response\n\nThe response will have a status code of 200 and will contain an array of objects, where each object represents a collaborator and includes the following properties:\n\n- contest_setter_id (number): The ID of the contest setter\n- contest_id (number): The ID of the contest\n- setter_id (number): The ID of the collaborator\n- role (string): The role of the collaborator in the contest"
					},
					"response": [
						{
							"name": "ShowAllCollaborators",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/showAllCollaborators/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"showAllCollaborators",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "226"
								},
								{
									"key": "ETag",
									"value": "W/\"e2-1VPxzIMbwiXPsv4JztbW9lm7cuY\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:13:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"contest_setter_id\": 2,\n        \"contest_id\": 3,\n        \"setter_id\": 3,\n        \"role\": \"collaborator\"\n    },\n    {\n        \"contest_setter_id\": 3,\n        \"contest_id\": 3,\n        \"setter_id\": 2,\n        \"role\": \"collaborator\"\n    },\n    {\n        \"contest_setter_id\": 4,\n        \"contest_id\": 3,\n        \"setter_id\": 5,\n        \"role\": \"collaborator\"\n    }\n]"
						}
					]
				},
				{
					"name": "AddProblem",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"problem_id\": \"71\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/addProblem/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"addProblem",
								""
							]
						},
						"description": "This API endpoint allows you to add a problem to a specific contest.\n\n### Request Body\n\n- `problem_id` (string): The ID of the problem to be added to the contest.\n    \n\n### Response\n\nUpon successful execution, the API returns a status code of 200 and an empty array."
					},
					"response": [
						{
							"name": "AddProblem",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"problem_id\": \"71\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/addProblem/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"addProblem",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:31:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "MakeEligible",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"problem_id\": \"99\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/makeEligible/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"makeEligible",
								""
							]
						},
						"description": "This HTTP PUT request is used to mark a contest as eligible. The request should be made to [https://bitsunplugged-dev.onrender.com/api/contest/3/makeEligible/](https://bitsunplugged-dev.onrender.com/api/contest/3/makeEligible/). The request body should contain a JSON object with the \"problem_id\" key. Upon successful execution, the API returns a status code of 200 and an empty array as the response.\n\n### Request Body\n\n- problem_id (string): The ID of the problem to be associated with the contest.\n    \n\n### Response\n\n- Status: 200\n- Data: An empty array"
					},
					"response": [
						{
							"name": "MakeEligible",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"problem_id\": \"99\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/makeEligible/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"makeEligible",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:37:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "MakeUneligible",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"problem_id\": \"99\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/makeNotEligible/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"makeNotEligible",
								""
							]
						},
						"description": "This HTTP PUT request is used to mark a contest with ID 3 as not eligible. The request should include a payload with a \"problem_id\" field. The response will have a status code of 200 and an empty array as the body."
					},
					"response": [
						{
							"name": "MakeUneligible",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"problem_id\": \"99\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/makeNotEligible/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"makeNotEligible",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:38:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "PublishContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTM0MjI1LCJleHAiOjE3MDQ2MjA2MjV9.CGlBkBSsV5w_Lqh5zc-NEF3YFg-ZturR13R8AVA1Ieo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/publish/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"publish",
								""
							]
						},
						"description": "This HTTP PUT request is used to publish a contest with the ID of 3. The request does not contain a request body. Upon successful execution, the API returns a status code of 200 with an empty array as the response."
					},
					"response": [
						{
							"name": "PublishContest",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/publish/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"publish",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:40:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "ViewProblemsForSetter",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDQ3ODc2MiwiZXhwIjoxNzA0NTY1MTYyfQ.fVUABuTDhrLWL4POZZpULTSDaSflGu7SiyfX-jI_5Bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/problems/setterview",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"problems",
								"setterview"
							]
						},
						"description": "This HTTP GET request retrieves a list of problems for a specific contest, targeted at the endpoint [https://bitsunplugged-dev.onrender.com/api/contest/3/problems/setterview](https://bitsunplugged-dev.onrender.com/api/contest/3/problems/setterview).\n\nThe response will include a JSON array containing details of each problem, such as problem ID, series ID, author ID, title, statement, canvas data, live status, last updated timestamp, checker code, parameters, UI parameters, control parameters, canvas ID, submit state ID, serial number, checker type, checker canvas, and status."
					},
					"response": [
						{
							"name": "ViewProblemsForSetter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/problems/setterview",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"problems",
										"setterview"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "9887"
								},
								{
									"key": "ETag",
									"value": "W/\"269f-A4neJkiWApSG4T0/+2qtTFu50tc\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:53:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 30,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction\",\n        \"statement\": \"There are 5 cities numbered from 0 to 4. We can construct roads between cities. Each road has a number associated with it denoting the cost to construct a road. We want to minimize our cost. **Select the roads from the given canvas in a way that from every city we can go to every other city and cost of constructing the roads are minimum.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0,\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1,\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2,\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3,\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4,\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704446854760\",\n        \"checker_code\": \"/**\\n * @param {Object} data (user_data/solution_data) - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - HashMap of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end, weight properties.\\n * @param {Array} data.selectedEdges - Array of selectedEdges. Where each edge is an object with start, end, weight properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(user_data, solution_data) {\\n  return JSON.stringify(user_data) === JSON.stringify(solution_data);\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 3,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0,\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1,\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2,\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3,\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4,\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        },\n        \"status\": \"in_contest\"\n    },\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1700994610385\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    2\n                ],\n                [\n                    1\n                ],\n                [\n                    0\n                ]\n            ]\n        },\n        \"status\": \"in_contest\"\n    },\n    {\n        \"problem_id\": 70,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 3 Disks\",\n        \"statement\": \"You already how to move 3 disks from one peg to another. But can you do it in minimum possible moves?\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701439115392\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 7 && data.pegs[2].length==3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 7,\n        \"serial_no\": 3,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 7,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2\n                ]\n            ]\n        },\n        \"status\": \"unpublished\"\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        },\n        \"status\": \"in_contest\"\n    },\n    {\n        \"problem_id\": 36,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Double TOH\",\n        \"statement\": \"Move the disks from left peg to right peg.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    10,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1694059054029\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  return data.numberOfMoves === 2 * (2 ** (data.numberOfDisks/2) - 1);\\n}\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 2,\n        \"serial_no\": 5,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 62,\n            \"numberOfDisks\": 10,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    10,\n                    0,\n                    2,\n                    12,\n                    4,\n                    14,\n                    6,\n                    16,\n                    8,\n                    18\n                ]\n            ]\n        },\n        \"status\": \"unpublished\"\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null,\n        \"status\": \"in_contest\"\n    },\n    {\n        \"problem_id\": 99,\n        \"series_id\": 9,\n        \"author_id\": 1,\n        \"title\": \"Bipartition\",\n        \"statement\": \"Remove minimum possible edges, such that the graph is a bipartite graph.\",\n        \"canvas_data\": null,\n        \"is_live\": true,\n        \"last_updated\": \"1704109169798\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - Array of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  const edges =  data.edges.map(edge => ({\\n\\t\\tstart: edge.start.nodeIndex,\\n\\t\\tend: edge.end.nodeIndex,\\n\\t\\tweight: edge.weight\\n\\t}));\\n\\t\\n  return false;\\n}\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 10,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": null,\n        \"status\": \"unpublished\"\n    }\n]"
						}
					]
				},
				{
					"name": "ViewProblemsForSolver",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDUzODQ4MywiZXhwIjoxNzA0NjI0ODgzfQ.njq89634fGJzWAyiuuEvamOhgBXnks5DcpzecB3mw-M",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/problems/userview",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"problems",
								"userview"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve the problems for the user view of a specific contest. The response will include an array of problem objects, each containing details such as problem ID, series ID, author ID, title, statement, canvas data, live status, last updated timestamp, checker code, parameters, UI parameters, control parameters, canvas ID, submit state ID, serial number, checker type, and checker canvas details."
					},
					"response": [
						{
							"name": "ViewProblemsForSolver",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/problems/userview",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"problems",
										"userview"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "6417"
								},
								{
									"key": "ETag",
									"value": "W/\"1911-lB3xwn3wuxR/ME+JbTaF+8kqHWI\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 10:55:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"problem_id\": 30,\n        \"series_id\": 1,\n        \"author_id\": 1,\n        \"title\": \"Road Construction\",\n        \"statement\": \"There are 5 cities numbered from 0 to 4. We can construct roads between cities. Each road has a number associated with it denoting the cost to construct a road. We want to minimize our cost. **Select the roads from the given canvas in a way that from every city we can go to every other city and cost of constructing the roads are minimum.**\",\n        \"canvas_data\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0,\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1,\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2,\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3,\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4,\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": []\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1704446854760\",\n        \"checker_code\": \"/**\\n * @param {Object} data (user_data/solution_data) - An object containing nodes and edges properties.\\n * @param {Array} data.nodes - HashMap of nodes. Where each node is an object with x,y properties.\\n * @param {Array} data.edges - Array of edges. Where each edge is an object with start, end, weight properties.\\n * @param {Array} data.selectedEdges - Array of selectedEdges. Where each edge is an object with start, end, weight properties.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(user_data, solution_data) {\\n  return JSON.stringify(user_data) === JSON.stringify(solution_data);\\n}\\n\",\n        \"params\": {\n            \"variant\": {\n                \"value\": \"simple_graph\",\n                \"type\": \"select\",\n                \"list\": [\n                    \"simple_graph\",\n                    \"tree\"\n                ]\n            },\n            \"directed_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"weighted_edge\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {},\n        \"control_params\": {\n            \"add_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"drag_node\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"add_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"delete_edge\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"edit_weight\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            }\n        },\n        \"canvas_id\": 1,\n        \"submit_state_id\": 3,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"edges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"1\",\n                    \"weight\": \"10\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"2\",\n                    \"weight\": \"50\"\n                }\n            ],\n            \"nodes\": {\n                \"0\": {\n                    \"x\": 159,\n                    \"y\": 218.8000030517578,\n                    \"label\": 0,\n                    \"color\": \"Default\"\n                },\n                \"1\": {\n                    \"x\": 386,\n                    \"y\": 87.80000305175781,\n                    \"label\": 1,\n                    \"color\": \"Default\"\n                },\n                \"2\": {\n                    \"x\": 628,\n                    \"y\": 217.8000030517578,\n                    \"label\": 2,\n                    \"color\": \"Default\"\n                },\n                \"3\": {\n                    \"x\": 387,\n                    \"y\": 234.8000030517578,\n                    \"label\": 3,\n                    \"color\": \"Default\"\n                },\n                \"4\": {\n                    \"x\": 392,\n                    \"y\": 396.8000030517578,\n                    \"label\": 4,\n                    \"color\": \"Default\"\n                }\n            },\n            \"selectedEdges\": [\n                {\n                    \"start\": \"0\",\n                    \"end\": \"4\",\n                    \"weight\": \"2\"\n                },\n                {\n                    \"start\": \"1\",\n                    \"end\": \"2\",\n                    \"weight\": \"30\"\n                },\n                {\n                    \"start\": \"3\",\n                    \"end\": \"1\",\n                    \"weight\": \"5\"\n                },\n                {\n                    \"start\": \"4\",\n                    \"end\": \"3\",\n                    \"weight\": \"3\"\n                }\n            ]\n        }\n    },\n    {\n        \"problem_id\": 68,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Reverse the Disks\",\n        \"statement\": \"Reverse the 3 disks.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0\n                ],\n                [\n                    1\n                ],\n                [\n                    2\n                ]\n            ]\n        },\n        \"is_live\": false,\n        \"last_updated\": \"1700994610385\",\n        \"checker_code\": \"function solutionChecker(data) {\\n  // Check if the pegs are ordered as 2, 1, 0\\n  const isPegsOrdered = data.pegs.map(peg => peg[0]).toString() === \\\"2,1,0\\\";\\n  // Check if the number of moves is equal to 3\\n  const isNumberOfMovesEqual3 = data.numberOfMoves === 3;\\n  // Check both conditions\\n  if (isPegsOrdered && isNumberOfMovesEqual3) {\\n    console.log(\\\"Pegs are ordered as 2, 1, 0, and the number of moves is 3.\\\");\\n    return true;\\n  } else {\\n    console.log(\\\"Pegs are not ordered as 2, 1, 0, or the number of moves is not 3.\\\");\\n    return false;\\n  }\\n  }\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 8,\n        \"serial_no\": 1,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 3,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    2\n                ],\n                [\n                    1\n                ],\n                [\n                    0\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 71,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"Min 4 Disks\",\n        \"statement\": \"Move the 4 disks from left to right peg in minimum possible moves.\",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701441086141\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.numberOfMoves == 15 && data.pegs[2].length == 4;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 5,\n        \"serial_no\": 4,\n        \"checker_type\": 1,\n        \"checker_canvas\": {\n            \"numberOfMoves\": 15,\n            \"numberOfDisks\": 4,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [],\n                [],\n                [\n                    0,\n                    1,\n                    2,\n                    3\n                ]\n            ]\n        }\n    },\n    {\n        \"problem_id\": 69,\n        \"series_id\": 2,\n        \"author_id\": 1,\n        \"title\": \"3 Disks\",\n        \"statement\": \"Move the 3 disks from left peg to right peg. You can use the middle peg to temporarily keep the disks. \",\n        \"canvas_data\": {\n            \"numberOfMoves\": 0,\n            \"numberOfDisks\": 3,\n            \"numberOfPegs\": 3,\n            \"pegs\": [\n                [\n                    0,\n                    1,\n                    2\n                ],\n                [],\n                []\n            ]\n        },\n        \"is_live\": true,\n        \"last_updated\": \"1701438806364\",\n        \"checker_code\": \"/**\\n *\\n * @param {Object} data - An object containing pegs and disks.\\n * @param {Array} data.pegs - Array of list of disks.\\n * @returns {boolean} True if the solution is valid, otherwise false.\\n */\\nfunction solutionChecker(data) {\\n  return data.pegs[2].length === 3;\\n}\\n\",\n        \"params\": {\n            \"custom_disk\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            },\n            \"ordered\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"ui_params\": {\n            \"moves\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"n_disks\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"custom_disk\": {\n                \"value\": false,\n                \"type\": \"switch\"\n            },\n            \"undo\": {\n                \"value\": true,\n                \"type\": \"switch\"\n            }\n        },\n        \"control_params\": {},\n        \"canvas_id\": 2,\n        \"submit_state_id\": 6,\n        \"serial_no\": 2,\n        \"checker_type\": 0,\n        \"checker_canvas\": null\n    }\n]"
						}
					]
				},
				{
					"name": "AddSubmission",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU2OTM5NywiZXhwIjoxNzA0NjU1Nzk3fQ.ci1xYdbzFHHoFT9Hh7_zjfmwJErn3QodNJJUJAEMh5E",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"submission_id\": \"71\",\r\n    \"problem_id\": \"71\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/1/addSubmission/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"1",
								"addSubmission",
								""
							]
						},
						"description": "\nThis API endpoint allows you to add a submission to the contest with ID 3. The HTTP POST request should be sent to https://bitsunplugged-dev.onrender.com/api/contest/3/addSubmission/. The request should include a JSON payload in the raw request body type with the key \"submission_id\" to specify the submission ID.\n\n### Request Body\n- submission_id (string, required): The ID of the submission to be added.\n\n### Response\nUpon successful execution, the API returns a status code of 200 and an empty array as the response body.\n"
					},
					"response": [
						{
							"name": "AddSubmission",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"submission_id\": \"71\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/addSubmission/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"addSubmission",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 12:55:50 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "GetAllSubmissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU0NjM1MywiZXhwIjoxNzA0NjMyNzUzfQ.O-sG82X-Y_qcHzfLE7MMgcmw_umXozC0QEX7M4OBnEY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/submissions/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"submissions",
								""
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve the submissions for contest. The request does not require a request body.\n\nThe response will have a status code of 200, and it will return an array of submission objects. Each submission object contains the participation ID, contest ID, problem ID, user ID, submission ID, points, verdict, timestamp, and JSON data."
					},
					"response": [
						{
							"name": "GetAllSubmissions",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/submissions/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"submissions",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "669"
								},
								{
									"key": "ETag",
									"value": "W/\"29d-2MugeyCF5E9p00n26VrNXlmV1TQ\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:08:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"participation_id\": 1,\n        \"contest_id\": 3,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"submission_id\": 70,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704545655304\",\n        \"json_data\": null\n    },\n    {\n        \"participation_id\": 2,\n        \"contest_id\": 3,\n        \"problem_id\": 68,\n        \"user_id\": 16,\n        \"submission_id\": 71,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704545666593\",\n        \"json_data\": null\n    },\n    {\n        \"participation_id\": 3,\n        \"contest_id\": 3,\n        \"problem_id\": 30,\n        \"user_id\": 20,\n        \"submission_id\": 72,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704546308966\",\n        \"json_data\": null\n    },\n    {\n        \"participation_id\": 4,\n        \"contest_id\": 3,\n        \"problem_id\": 71,\n        \"user_id\": 20,\n        \"submission_id\": 73,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704546320889\",\n        \"json_data\": null\n    }\n]"
						}
					]
				},
				{
					"name": "GetMySubmissions",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImVtYWlsIjoibWFoaXJsYWJpYmRpaGFuQGdtYWlsLmNvbSIsInBhc3MiOiIkMmEkMTAka0szV0F4cmJDTGwwcUhqc3dhdWpiLk1ZbmtxUlVlTExPMFBjazgwUUZoYzQ3RkxuTFdLT0siLCJ0eXBlIjoiMCIsImlhdCI6MTcwNDU2OTMyMCwiZXhwIjoxNzA0NjU1NzIwfQ.330dRbOZbjpAtsR4MzLMWzwAfLZ_mvsVs9hLo1gtQcY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/1/submissions/me/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"1",
								"submissions",
								"me",
								""
							]
						},
						"description": "# Get Contest Submissions\n\nThis endpoint retrieves the submissions for the authenticated user in a specific contest.\n\n## Request\n\n### Endpoint\n\n`GET https://bitsunplugged-dev.onrender.com/api/contest/1/submissions/me/`\n\n## Response\n\n- Status: 200 OK\n    \n\nThe response will contain an array of submission objects, each containing the following attributes:\n\n- `participation_id` (integer): The ID of the participation.\n- `contest_id` (integer): The ID of the contest.\n- `problem_id` (integer): The ID of the problem.\n- `user_id` (integer): The ID of the user.\n- `submission_id` (integer): The ID of the submission.\n- `points` (null): The points earned for the submission.\n- `verdict` (string): The verdict of the submission.\n- `time_stamp` (string): The timestamp of the submission.\n- `json_data` (null): Additional JSON data related to the submission."
					},
					"response": [
						{
							"name": "GetMySubmissions",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/1/submissions/me/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"1",
										"submissions",
										"me",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "502"
								},
								{
									"key": "ETag",
									"value": "W/\"1f6-mksQ6wzRQKNcmKyKAq/rEeqndnc\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 19:50:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"participation_id\": 5,\n        \"contest_id\": 1,\n        \"problem_id\": 68,\n        \"user_id\": 16,\n        \"submission_id\": 71,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704545666593\",\n        \"json_data\": null\n    },\n    {\n        \"participation_id\": 7,\n        \"contest_id\": 1,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"submission_id\": 74,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704569874830\",\n        \"json_data\": null\n    },\n    {\n        \"participation_id\": 8,\n        \"contest_id\": 1,\n        \"problem_id\": 30,\n        \"user_id\": 16,\n        \"submission_id\": 76,\n        \"points\": null,\n        \"verdict\": \"Accepted\",\n        \"time_stamp\": \"1704570230451\",\n        \"json_data\": null\n    }\n]"
						}
					]
				},
				{
					"name": "StartContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ4NDM2LCJleHAiOjE3MDQ2MzQ4MzZ9.lBDg_6IUyDK-qAQJ3o_H6FSYu-IcZ7Z5gJ_C0Og-8YY",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/start/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"start",
								""
							]
						},
						"description": "This endpoint is used to start a contest with the ID 3. The HTTP PUT request should be made to [https://bitsunplugged-dev.onrender.com/api/contest/3/start/](https://bitsunplugged-dev.onrender.com/api/contest/3/start/).\n\nThe request does not require a request body, as indicated by the null payload.\n\nUpon a successful execution, the API returns a status code of 200 with an empty array \\[\\] as the response."
					},
					"response": [
						{
							"name": "StartContest",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/start/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"start",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:40:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "EndContest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJtYWhpcmxhYmliZGloYW5AZ21haWwuY29tIiwicGFzcyI6IiQyYSQxMCRrSzNXQXhyYkNMbDBxSGpzd2F1amIuTVlua3FSVWVMTE8wUGNrODBRRmhjNDdGTG5MV0tPSyIsInR5cGUiOiIxIiwiaWF0IjoxNzA0NTQ4NDM2LCJleHAiOjE3MDQ2MzQ4MzZ9.lBDg_6IUyDK-qAQJ3o_H6FSYu-IcZ7Z5gJ_C0Og-8YY",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/end/",
							"protocol": "https",
							"host": [
								"bitsunplugged-dev.onrender.com"
							],
							"port": "443",
							"path": [
								"api",
								"contest",
								"3",
								"end",
								""
							]
						},
						"description": "This endpoint is used to end a specific contest by sending an HTTP PUT request to the specified URL. The request does not require a request body. Upon a successful execution, the endpoint returns a 200 status code with an empty array in the response."
					},
					"response": [
						{
							"name": "EndContest",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://bitsunplugged-dev.onrender.com/api/contest/3/end/",
									"protocol": "https",
									"host": [
										"bitsunplugged-dev.onrender.com"
									],
									"port": "443",
									"path": [
										"api",
										"contest",
										"3",
										"end",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
								},
								{
									"key": "Date",
									"value": "Sat, 06 Jan 2024 13:42:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				}
			],
			"description": "Routes for Contests arrangement and participation."
		}
	]
}